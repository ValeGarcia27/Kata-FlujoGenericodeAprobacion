/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/mssql";
exports.ids = ["vendor-chunks/mssql"];
exports.modules = {

/***/ "(rsc)/./node_modules/mssql/index.js":
/*!*************************************!*\
  !*** ./node_modules/mssql/index.js ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__(/*! ./lib/tedious */ \"(rsc)/./node_modules/mssql/lib/tedious/index.js\")\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbXNzcWwvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUEsNEdBQXlDIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXFZhbGVudGluYVxcT25lRHJpdmVcXERlc2t0b3BcXEthdGEgR2l0XFxLYXRhLUZsdWpvR2VuZXJpY29kZUFwcm9iYWNpb25cXG5vZGVfbW9kdWxlc1xcbXNzcWxcXGluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvdGVkaW91cycpXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mssql/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mssql/lib/base/connection-pool.js":
/*!********************************************************!*\
  !*** ./node_modules/mssql/lib/base/connection-pool.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst { EventEmitter } = __webpack_require__(/*! node:events */ \"node:events\")\nconst debug = __webpack_require__(/*! debug */ \"(rsc)/./node_modules/debug/src/index.js\")('mssql:base')\nconst { parseSqlConnectionString } = __webpack_require__(/*! @tediousjs/connection-string */ \"(rsc)/./node_modules/@tediousjs/connection-string/lib/index.js\")\nconst tarn = __webpack_require__(/*! tarn */ \"(rsc)/./node_modules/tarn/dist/tarn.js\")\nconst { IDS } = __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/mssql/lib/utils.js\")\nconst ConnectionError = __webpack_require__(/*! ../error/connection-error */ \"(rsc)/./node_modules/mssql/lib/error/connection-error.js\")\nconst shared = __webpack_require__(/*! ../shared */ \"(rsc)/./node_modules/mssql/lib/shared.js\")\nconst clone = __webpack_require__(/*! rfdc/default */ \"(rsc)/./node_modules/rfdc/default.js\")\nconst { MSSQLError } = __webpack_require__(/*! ../error */ \"(rsc)/./node_modules/mssql/lib/error/index.js\")\n\n/**\n * Class ConnectionPool.\n *\n * Internally, each `Connection` instance is a separate pool of TDS connections. Once you create a new `Request`/`Transaction`/`Prepared Statement`, a new TDS connection is acquired from the pool and reserved for desired action. Once the action is complete, connection is released back to the pool.\n *\n * @property {Boolean} connected If true, connection is established.\n * @property {Boolean} connecting If true, connection is being established.\n *\n * @fires ConnectionPool#connect\n * @fires ConnectionPool#close\n */\n\nclass ConnectionPool extends EventEmitter {\n  /**\n   * Create new Connection.\n   *\n   * @param {Object|String} config Connection configuration object or connection string.\n   * @param {basicCallback} [callback] A callback which is called after connection has established, or an error has occurred.\n   */\n\n  constructor (config, callback) {\n    super()\n\n    IDS.add(this, 'ConnectionPool')\n    debug('pool(%d): created', IDS.get(this))\n\n    this._connectStack = []\n    this._closeStack = []\n\n    this._connected = false\n    this._connecting = false\n    this._healthy = false\n\n    if (typeof config === 'string') {\n      try {\n        this.config = this.constructor.parseConnectionString(config)\n      } catch (ex) {\n        if (typeof callback === 'function') {\n          return setImmediate(callback, ex)\n        }\n        throw ex\n      }\n    } else {\n      this.config = clone(config)\n    }\n\n    // set defaults\n    this.config.port = this.config.port || 1433\n    this.config.options = this.config.options || {}\n    this.config.stream = this.config.stream || false\n    this.config.parseJSON = this.config.parseJSON || false\n    this.config.arrayRowMode = this.config.arrayRowMode || false\n    this.config.validateConnection = 'validateConnection' in this.config ? this.config.validateConnection : true\n\n    const namedServer = /^(.*)\\\\(.*)$/.exec(this.config.server)\n    if (namedServer) {\n      this.config.server = namedServer[1]\n      this.config.options.instanceName = namedServer[2]\n    }\n\n    if (typeof this.config.options.useColumnNames !== 'undefined' && this.config.options.useColumnNames !== true) {\n      const ex = new MSSQLError('Invalid options `useColumnNames`, use `arrayRowMode` instead')\n      if (typeof callback === 'function') {\n        return setImmediate(callback, ex)\n      }\n      throw ex\n    }\n\n    if (typeof callback === 'function') {\n      this.connect(callback)\n    }\n  }\n\n  get connected () {\n    return this._connected\n  }\n\n  get connecting () {\n    return this._connecting\n  }\n\n  get healthy () {\n    return this._healthy\n  }\n\n  static parseConnectionString (connectionString) {\n    return this._parseConnectionString(connectionString)\n  }\n\n  static _parseAuthenticationType (type, entries) {\n    switch (type.toLowerCase()) {\n      case 'active directory integrated':\n        if (entries.includes('token')) {\n          return 'azure-active-directory-access-token'\n        } else if (['client id', 'client secret', 'tenant id'].every(entry => entries.includes(entry))) {\n          return 'azure-active-directory-service-principal-secret'\n        } else if (['client id', 'msi endpoint', 'msi secret'].every(entry => entries.includes(entry))) {\n          return 'azure-active-directory-msi-app-service'\n        } else if (['client id', 'msi endpoint'].every(entry => entries.includes(entry))) {\n          return 'azure-active-directory-msi-vm'\n        }\n        return 'azure-active-directory-default'\n      case 'active directory password':\n        return 'azure-active-directory-password'\n      case 'ntlm':\n        return 'ntlm'\n      default:\n        return 'default'\n    }\n  }\n\n  static _parseConnectionString (connectionString) {\n    const parsed = parseSqlConnectionString(connectionString, true, true)\n    return Object.entries(parsed).reduce((config, [key, value]) => {\n      switch (key) {\n        case 'application name':\n          break\n        case 'applicationintent':\n          Object.assign(config.options, {\n            readOnlyIntent: value === 'readonly'\n          })\n          break\n        case 'asynchronous processing':\n          break\n        case 'attachdbfilename':\n          break\n        case 'authentication':\n          Object.assign(config, {\n            authentication_type: this._parseAuthenticationType(value, Object.keys(parsed))\n          })\n          break\n        case 'column encryption setting':\n          break\n        case 'connection timeout':\n          Object.assign(config, {\n            connectionTimeout: value * 1000\n          })\n          break\n        case 'connection lifetime':\n          break\n        case 'connectretrycount':\n          break\n        case 'connectretryinterval':\n          Object.assign(config.options, {\n            connectionRetryInterval: value * 1000\n          })\n          break\n        case 'context connection':\n          break\n        case 'client id':\n          Object.assign(config, {\n            clientId: value\n          })\n          break\n        case 'client secret':\n          Object.assign(config, {\n            clientSecret: value\n          })\n          break\n        case 'current language':\n          Object.assign(config.options, {\n            language: value\n          })\n          break\n        case 'data source':\n        {\n          let server = value\n          let instanceName\n          let port = 1433\n          if (/^np:/i.test(server)) {\n            throw new Error('Connection via Named Pipes is not supported.')\n          }\n          if (/^tcp:/i.test(server)) {\n            server = server.substr(4)\n          }\n          const namedServerParts = /^(.*)\\\\(.*)$/.exec(server)\n          if (namedServerParts) {\n            server = namedServerParts[1].trim()\n            instanceName = namedServerParts[2].trim()\n          }\n          const serverParts = /^(.*),(.*)$/.exec(server)\n          if (serverParts) {\n            server = serverParts[1].trim()\n            port = parseInt(serverParts[2].trim(), 10)\n          } else {\n            const instanceParts = /^(.*),(.*)$/.exec(instanceName)\n            if (instanceParts) {\n              instanceName = instanceParts[1].trim()\n              port = parseInt(instanceParts[2].trim(), 10)\n            }\n          }\n          if (server === '.' || server === '(.)' || server.toLowerCase() === '(localdb)' || server.toLowerCase() === '(local)') {\n            server = 'localhost'\n          }\n          Object.assign(config, {\n            port,\n            server\n          })\n          if (instanceName) {\n            Object.assign(config.options, {\n              instanceName\n            })\n          }\n          break\n        }\n        case 'encrypt':\n          Object.assign(config.options, {\n            encrypt: !!value\n          })\n          break\n        case 'enlist':\n          break\n        case 'failover partner':\n          break\n        case 'initial catalog':\n          Object.assign(config, {\n            database: value\n          })\n          break\n        case 'integrated security':\n          break\n        case 'max pool size':\n          Object.assign(config.pool, {\n            max: value\n          })\n          break\n        case 'min pool size':\n          Object.assign(config.pool, {\n            min: value\n          })\n          break\n        case 'msi endpoint':\n          Object.assign(config, {\n            msiEndpoint: value\n          })\n          break\n        case 'msi secret':\n          Object.assign(config, {\n            msiSecret: value\n          })\n          break\n        case 'multipleactiveresultsets':\n          break\n        case 'multisubnetfailover':\n          Object.assign(config.options, {\n            multiSubnetFailover: value\n          })\n          break\n        case 'network library':\n          break\n        case 'packet size':\n          Object.assign(config.options, {\n            packetSize: value\n          })\n          break\n        case 'password':\n          Object.assign(config, {\n            password: value\n          })\n          break\n        case 'persist security info':\n          break\n        case 'poolblockingperiod':\n          break\n        case 'pooling':\n          break\n        case 'replication':\n          break\n        case 'tenant id':\n          Object.assign(config, {\n            tenantId: value\n          })\n          break\n        case 'token':\n          Object.assign(config, {\n            token: value\n          })\n          break\n        case 'transaction binding':\n          Object.assign(config.options, {\n            enableImplicitTransactions: value.toLowerCase() === 'implicit unbind'\n          })\n          break\n        case 'transparentnetworkipresolution':\n          break\n        case 'trustservercertificate':\n          Object.assign(config.options, {\n            trustServerCertificate: value\n          })\n          break\n        case 'type system version':\n          break\n        case 'user id': {\n          let user = value\n          let domain\n          const domainUser = /^(.*)\\\\(.*)$/.exec(user)\n          if (domainUser) {\n            domain = domainUser[1]\n            user = domainUser[2]\n          }\n          if (domain) {\n            Object.assign(config, {\n              domain\n            })\n          }\n          if (user) {\n            Object.assign(config, {\n              user\n            })\n          }\n          break\n        }\n        case 'user instance':\n          break\n        case 'workstation id':\n          Object.assign(config.options, {\n            workstationId: value\n          })\n          break\n        case 'request timeout':\n          Object.assign(config, {\n            requestTimeout: parseInt(value, 10)\n          })\n          break\n        case 'stream':\n          Object.assign(config, {\n            stream: !!value\n          })\n          break\n        case 'useutc':\n          Object.assign(config.options, {\n            useUTC: !!value\n          })\n          break\n        case 'parsejson':\n          Object.assign(config, {\n            parseJSON: !!value\n          })\n          break\n      }\n      return config\n    }, { options: {}, pool: {} })\n  }\n\n  /**\n   * Acquire connection from this connection pool.\n   *\n   * @param {ConnectionPool|Transaction|PreparedStatement} requester Requester.\n   * @param {acquireCallback} [callback] A callback which is called after connection has been acquired, or an error has occurred. If omited, method returns Promise.\n   * @return {ConnectionPool|Promise}\n   */\n\n  acquire (requester, callback) {\n    const acquirePromise = shared.Promise.resolve(this._acquire()).catch(err => {\n      this.emit('error', err)\n      throw err\n    })\n    if (typeof callback === 'function') {\n      acquirePromise.then(connection => callback(null, connection, this.config)).catch(callback)\n      return this\n    }\n\n    return acquirePromise\n  }\n\n  _acquire () {\n    if (!this.pool) {\n      return shared.Promise.reject(new ConnectionError('Connection not yet open.', 'ENOTOPEN'))\n    } else if (this.pool.destroyed) {\n      return shared.Promise.reject(new ConnectionError('Connection is closing', 'ENOTOPEN'))\n    }\n\n    return this.pool.acquire().promise\n  }\n\n  /**\n   * Release connection back to the pool.\n   *\n   * @param {Connection} connection Previously acquired connection.\n   * @return {ConnectionPool}\n   */\n\n  release (connection) {\n    debug('connection(%d): released', IDS.get(connection))\n\n    if (this.pool) {\n      this.pool.release(connection)\n    }\n    return this\n  }\n\n  /**\n   * Creates a new connection pool with one active connection. This one initial connection serves as a probe to find out whether the configuration is valid.\n   *\n   * @param {basicCallback} [callback] A callback which is called after connection has established, or an error has occurred. If omited, method returns Promise.\n   * @return {ConnectionPool|Promise}\n   */\n\n  connect (callback) {\n    if (typeof callback === 'function') {\n      this._connect(callback)\n      return this\n    }\n\n    return new shared.Promise((resolve, reject) => {\n      return this._connect(err => {\n        if (err) return reject(err)\n        resolve(this)\n      })\n    })\n  }\n\n  /**\n   * @private\n   * @param {basicCallback} callback\n   */\n\n  _connect (callback) {\n    if (this._connected) {\n      debug('pool(%d): already connected, executing connect callback immediately', IDS.get(this))\n      return setImmediate(callback, null, this)\n    }\n\n    this._connectStack.push(callback)\n\n    if (this._connecting) {\n      return\n    }\n\n    this._connecting = true\n    debug('pool(%d): connecting', IDS.get(this))\n\n    // create one test connection to check if everything is ok\n    this._poolCreate().then((connection) => {\n      debug('pool(%d): connected', IDS.get(this))\n      this._healthy = true\n\n      return this._poolDestroy(connection).then(() => {\n        // prepare pool\n        this.pool = new tarn.Pool(\n          Object.assign({\n            create: () => this._poolCreate()\n              .then(connection => {\n                this._healthy = true\n                return connection\n              })\n              .catch(err => {\n                if (this.pool.numUsed() + this.pool.numFree() <= 0) {\n                  this._healthy = false\n                }\n                throw err\n              }),\n            validate: this._poolValidate.bind(this),\n            destroy: this._poolDestroy.bind(this),\n            max: 10,\n            min: 0,\n            idleTimeoutMillis: 30000,\n            propagateCreateError: true\n          }, this.config.pool)\n        )\n\n        this._connecting = false\n        this._connected = true\n      })\n    }).then(() => {\n      this._connectStack.forEach((cb) => {\n        setImmediate(cb, null, this)\n      })\n    }).catch(err => {\n      this._connecting = false\n      this._connectStack.forEach((cb) => {\n        setImmediate(cb, err)\n      })\n    }).then(() => {\n      this._connectStack = []\n    })\n  }\n\n  get size () {\n    return this.pool.numFree() + this.pool.numUsed() + this.pool.numPendingCreates()\n  }\n\n  get available () {\n    return this.pool.numFree()\n  }\n\n  get pending () {\n    return this.pool.numPendingAcquires()\n  }\n\n  get borrowed () {\n    return this.pool.numUsed()\n  }\n\n  /**\n   * Close all active connections in the pool.\n   *\n   * @param {basicCallback} [callback] A callback which is called after connection has closed, or an error has occurred. If omited, method returns Promise.\n   * @return {ConnectionPool|Promise}\n   */\n\n  close (callback) {\n    if (typeof callback === 'function') {\n      this._close(callback)\n      return this\n    }\n\n    return new shared.Promise((resolve, reject) => {\n      this._close(err => {\n        if (err) return reject(err)\n        resolve(this)\n      })\n    })\n  }\n\n  /**\n   * @private\n   * @param {basicCallback} callback\n   */\n\n  _close (callback) {\n    // we don't allow pools in a connecting state to be closed because it means there are far too many\n    // edge cases to deal with\n    if (this._connecting) {\n      debug('pool(%d): close called while connecting', IDS.get(this))\n      setImmediate(callback, new ConnectionError('Cannot close a pool while it is connecting'))\n    }\n\n    if (!this.pool) {\n      debug('pool(%d): already closed, executing close callback immediately', IDS.get(this))\n      return setImmediate(callback, null)\n    }\n\n    this._closeStack.push(callback)\n\n    if (this.pool.destroyed) return\n\n    this._connecting = this._connected = this._healthy = false\n\n    this.pool.destroy().then(() => {\n      debug('pool(%d): pool closed, removing pool reference and executing close callbacks', IDS.get(this))\n      this.pool = null\n      this._closeStack.forEach(cb => {\n        setImmediate(cb, null)\n      })\n    }).catch(err => {\n      this.pool = null\n      this._closeStack.forEach(cb => {\n        setImmediate(cb, err)\n      })\n    }).then(() => {\n      this._closeStack = []\n    })\n  }\n\n  /**\n   * Returns new request using this connection.\n   *\n   * @return {Request}\n   */\n\n  request () {\n    return new shared.driver.Request(this)\n  }\n\n  /**\n   * Returns new transaction using this connection.\n   *\n   * @return {Transaction}\n   */\n\n  transaction () {\n    return new shared.driver.Transaction(this)\n  }\n\n  /**\n   * Creates a new query using this connection from a tagged template string.\n   *\n   * @variation 1\n   * @param {Array} strings Array of string literals.\n   * @param {...*} keys Values.\n   * @return {Request}\n   */\n\n  /**\n   * Execute the SQL command.\n   *\n   * @variation 2\n   * @param {String} command T-SQL command to be executed.\n   * @param {Request~requestCallback} [callback] A callback which is called after execution has completed, or an error has occurred. If omited, method returns Promise.\n   * @return {Request|Promise}\n   */\n\n  query () {\n    if (typeof arguments[0] === 'string') { return new shared.driver.Request(this).query(arguments[0], arguments[1]) }\n\n    const values = Array.prototype.slice.call(arguments)\n    const strings = values.shift()\n\n    return new shared.driver.Request(this)._template(strings, values, 'query')\n  }\n\n  /**\n   * Creates a new batch using this connection from a tagged template string.\n   *\n   * @variation 1\n   * @param {Array} strings Array of string literals.\n   * @param {...*} keys Values.\n   * @return {Request}\n   */\n\n  /**\n   * Execute the SQL command.\n   *\n   * @variation 2\n   * @param {String} command T-SQL command to be executed.\n   * @param {Request~requestCallback} [callback] A callback which is called after execution has completed, or an error has occurred. If omited, method returns Promise.\n   * @return {Request|Promise}\n   */\n\n  batch () {\n    if (typeof arguments[0] === 'string') { return new shared.driver.Request(this).batch(arguments[0], arguments[1]) }\n\n    const values = Array.prototype.slice.call(arguments)\n    const strings = values.shift()\n\n    return new shared.driver.Request(this)._template(strings, values, 'batch')\n  }\n}\n\nmodule.exports = ConnectionPool\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mssql/lib/base/connection-pool.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mssql/lib/base/index.js":
/*!**********************************************!*\
  !*** ./node_modules/mssql/lib/base/index.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst ConnectionPool = __webpack_require__(/*! ./connection-pool */ \"(rsc)/./node_modules/mssql/lib/base/connection-pool.js\")\nconst PreparedStatement = __webpack_require__(/*! ./prepared-statement */ \"(rsc)/./node_modules/mssql/lib/base/prepared-statement.js\")\nconst Request = __webpack_require__(/*! ./request */ \"(rsc)/./node_modules/mssql/lib/base/request.js\")\nconst Transaction = __webpack_require__(/*! ./transaction */ \"(rsc)/./node_modules/mssql/lib/base/transaction.js\")\nconst { ConnectionError, TransactionError, RequestError, PreparedStatementError, MSSQLError } = __webpack_require__(/*! ../error */ \"(rsc)/./node_modules/mssql/lib/error/index.js\")\nconst shared = __webpack_require__(/*! ../shared */ \"(rsc)/./node_modules/mssql/lib/shared.js\")\nconst Table = __webpack_require__(/*! ../table */ \"(rsc)/./node_modules/mssql/lib/table.js\")\nconst ISOLATION_LEVEL = __webpack_require__(/*! ../isolationlevel */ \"(rsc)/./node_modules/mssql/lib/isolationlevel.js\")\nconst { TYPES } = __webpack_require__(/*! ../datatypes */ \"(rsc)/./node_modules/mssql/lib/datatypes.js\")\nconst { connect, close, on, off, removeListener, query, batch } = __webpack_require__(/*! ../global-connection */ \"(rsc)/./node_modules/mssql/lib/global-connection.js\")\n\nmodule.exports = {\n  ConnectionPool,\n  Transaction,\n  Request,\n  PreparedStatement,\n  ConnectionError,\n  TransactionError,\n  RequestError,\n  PreparedStatementError,\n  MSSQLError,\n  driver: shared.driver,\n  exports: {\n    ConnectionError,\n    TransactionError,\n    RequestError,\n    PreparedStatementError,\n    MSSQLError,\n    Table,\n    ISOLATION_LEVEL,\n    TYPES,\n    MAX: 65535, // (1 << 16) - 1\n    map: shared.map,\n    getTypeByValue: shared.getTypeByValue,\n    connect,\n    close,\n    on,\n    removeListener,\n    off,\n    query,\n    batch\n  }\n}\n\nObject.defineProperty(module.exports, \"Promise\", ({\n  enumerable: true,\n  get: () => {\n    return shared.Promise\n  },\n  set: (value) => {\n    shared.Promise = value\n  }\n}))\n\nObject.defineProperty(module.exports, \"valueHandler\", ({\n  enumerable: true,\n  value: shared.valueHandler,\n  writable: false,\n  configurable: false\n}))\n\nfor (const key in TYPES) {\n  const value = TYPES[key]\n  module.exports.exports[key] = value\n  module.exports.exports[key.toUpperCase()] = value\n}\n\n/**\n * @callback Request~requestCallback\n * @param {Error} err Error on error, otherwise null.\n * @param {Object} [result] Request result.\n */\n\n/**\n * @callback Request~bulkCallback\n * @param {Error} err Error on error, otherwise null.\n * @param {Number} [rowsAffected] Number of affected rows.\n */\n\n/**\n * @callback basicCallback\n * @param {Error} err Error on error, otherwise null.\n * @param {Connection} [connection] Acquired connection.\n */\n\n/**\n * @callback acquireCallback\n * @param {Error} err Error on error, otherwise null.\n * @param {Connection} [connection] Acquired connection.\n * @param {Object} [config] Connection config\n */\n\n/**\n * Dispatched after connection has established.\n * @event ConnectionPool#connect\n */\n\n/**\n * Dispatched after connection has closed a pool (by calling close).\n * @event ConnectionPool#close\n */\n\n/**\n * Dispatched when transaction begin.\n * @event Transaction#begin\n */\n\n/**\n * Dispatched on successful commit.\n * @event Transaction#commit\n */\n\n/**\n * Dispatched on successful rollback.\n * @event Transaction#rollback\n */\n\n/**\n * Dispatched when metadata for new recordset are parsed.\n * @event Request#recordset\n */\n\n/**\n * Dispatched when new row is parsed.\n * @event Request#row\n */\n\n/**\n * Dispatched when request is complete.\n * @event Request#done\n */\n\n/**\n * Dispatched on error.\n * @event Request#error\n */\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbXNzcWwvbGliL2Jhc2UvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVosdUJBQXVCLG1CQUFPLENBQUMsaUZBQW1CO0FBQ2xELDBCQUEwQixtQkFBTyxDQUFDLHVGQUFzQjtBQUN4RCxnQkFBZ0IsbUJBQU8sQ0FBQyxpRUFBVztBQUNuQyxvQkFBb0IsbUJBQU8sQ0FBQyx5RUFBZTtBQUMzQyxRQUFRLHNGQUFzRixFQUFFLG1CQUFPLENBQUMsK0RBQVU7QUFDbEgsZUFBZSxtQkFBTyxDQUFDLDJEQUFXO0FBQ2xDLGNBQWMsbUJBQU8sQ0FBQyx5REFBVTtBQUNoQyx3QkFBd0IsbUJBQU8sQ0FBQywyRUFBbUI7QUFDbkQsUUFBUSxRQUFRLEVBQUUsbUJBQU8sQ0FBQyxpRUFBYztBQUN4QyxRQUFRLHdEQUF3RCxFQUFFLG1CQUFPLENBQUMsaUZBQXNCOztBQUVoRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGtEQUFpRDtBQUNqRDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxFQUFDOztBQUVGLHVEQUFzRDtBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsRUFBQzs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsV0FBVyxRQUFRO0FBQ25COztBQUVBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsV0FBVyxRQUFRO0FBQ25COztBQUVBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsV0FBVyxZQUFZO0FBQ3ZCOztBQUVBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsV0FBVyxZQUFZO0FBQ3ZCLFdBQVcsUUFBUTtBQUNuQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxWYWxlbnRpbmFcXE9uZURyaXZlXFxEZXNrdG9wXFxLYXRhIEdpdFxcS2F0YS1GbHVqb0dlbmVyaWNvZGVBcHJvYmFjaW9uXFxub2RlX21vZHVsZXNcXG1zc3FsXFxsaWJcXGJhc2VcXGluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5jb25zdCBDb25uZWN0aW9uUG9vbCA9IHJlcXVpcmUoJy4vY29ubmVjdGlvbi1wb29sJylcbmNvbnN0IFByZXBhcmVkU3RhdGVtZW50ID0gcmVxdWlyZSgnLi9wcmVwYXJlZC1zdGF0ZW1lbnQnKVxuY29uc3QgUmVxdWVzdCA9IHJlcXVpcmUoJy4vcmVxdWVzdCcpXG5jb25zdCBUcmFuc2FjdGlvbiA9IHJlcXVpcmUoJy4vdHJhbnNhY3Rpb24nKVxuY29uc3QgeyBDb25uZWN0aW9uRXJyb3IsIFRyYW5zYWN0aW9uRXJyb3IsIFJlcXVlc3RFcnJvciwgUHJlcGFyZWRTdGF0ZW1lbnRFcnJvciwgTVNTUUxFcnJvciB9ID0gcmVxdWlyZSgnLi4vZXJyb3InKVxuY29uc3Qgc2hhcmVkID0gcmVxdWlyZSgnLi4vc2hhcmVkJylcbmNvbnN0IFRhYmxlID0gcmVxdWlyZSgnLi4vdGFibGUnKVxuY29uc3QgSVNPTEFUSU9OX0xFVkVMID0gcmVxdWlyZSgnLi4vaXNvbGF0aW9ubGV2ZWwnKVxuY29uc3QgeyBUWVBFUyB9ID0gcmVxdWlyZSgnLi4vZGF0YXR5cGVzJylcbmNvbnN0IHsgY29ubmVjdCwgY2xvc2UsIG9uLCBvZmYsIHJlbW92ZUxpc3RlbmVyLCBxdWVyeSwgYmF0Y2ggfSA9IHJlcXVpcmUoJy4uL2dsb2JhbC1jb25uZWN0aW9uJylcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIENvbm5lY3Rpb25Qb29sLFxuICBUcmFuc2FjdGlvbixcbiAgUmVxdWVzdCxcbiAgUHJlcGFyZWRTdGF0ZW1lbnQsXG4gIENvbm5lY3Rpb25FcnJvcixcbiAgVHJhbnNhY3Rpb25FcnJvcixcbiAgUmVxdWVzdEVycm9yLFxuICBQcmVwYXJlZFN0YXRlbWVudEVycm9yLFxuICBNU1NRTEVycm9yLFxuICBkcml2ZXI6IHNoYXJlZC5kcml2ZXIsXG4gIGV4cG9ydHM6IHtcbiAgICBDb25uZWN0aW9uRXJyb3IsXG4gICAgVHJhbnNhY3Rpb25FcnJvcixcbiAgICBSZXF1ZXN0RXJyb3IsXG4gICAgUHJlcGFyZWRTdGF0ZW1lbnRFcnJvcixcbiAgICBNU1NRTEVycm9yLFxuICAgIFRhYmxlLFxuICAgIElTT0xBVElPTl9MRVZFTCxcbiAgICBUWVBFUyxcbiAgICBNQVg6IDY1NTM1LCAvLyAoMSA8PCAxNikgLSAxXG4gICAgbWFwOiBzaGFyZWQubWFwLFxuICAgIGdldFR5cGVCeVZhbHVlOiBzaGFyZWQuZ2V0VHlwZUJ5VmFsdWUsXG4gICAgY29ubmVjdCxcbiAgICBjbG9zZSxcbiAgICBvbixcbiAgICByZW1vdmVMaXN0ZW5lcixcbiAgICBvZmYsXG4gICAgcXVlcnksXG4gICAgYmF0Y2hcbiAgfVxufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLmV4cG9ydHMsICdQcm9taXNlJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6ICgpID0+IHtcbiAgICByZXR1cm4gc2hhcmVkLlByb21pc2VcbiAgfSxcbiAgc2V0OiAodmFsdWUpID0+IHtcbiAgICBzaGFyZWQuUHJvbWlzZSA9IHZhbHVlXG4gIH1cbn0pXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUuZXhwb3J0cywgJ3ZhbHVlSGFuZGxlcicsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgdmFsdWU6IHNoYXJlZC52YWx1ZUhhbmRsZXIsXG4gIHdyaXRhYmxlOiBmYWxzZSxcbiAgY29uZmlndXJhYmxlOiBmYWxzZVxufSlcblxuZm9yIChjb25zdCBrZXkgaW4gVFlQRVMpIHtcbiAgY29uc3QgdmFsdWUgPSBUWVBFU1trZXldXG4gIG1vZHVsZS5leHBvcnRzLmV4cG9ydHNba2V5XSA9IHZhbHVlXG4gIG1vZHVsZS5leHBvcnRzLmV4cG9ydHNba2V5LnRvVXBwZXJDYXNlKCldID0gdmFsdWVcbn1cblxuLyoqXG4gKiBAY2FsbGJhY2sgUmVxdWVzdH5yZXF1ZXN0Q2FsbGJhY2tcbiAqIEBwYXJhbSB7RXJyb3J9IGVyciBFcnJvciBvbiBlcnJvciwgb3RoZXJ3aXNlIG51bGwuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3VsdF0gUmVxdWVzdCByZXN1bHQuXG4gKi9cblxuLyoqXG4gKiBAY2FsbGJhY2sgUmVxdWVzdH5idWxrQ2FsbGJhY2tcbiAqIEBwYXJhbSB7RXJyb3J9IGVyciBFcnJvciBvbiBlcnJvciwgb3RoZXJ3aXNlIG51bGwuXG4gKiBAcGFyYW0ge051bWJlcn0gW3Jvd3NBZmZlY3RlZF0gTnVtYmVyIG9mIGFmZmVjdGVkIHJvd3MuXG4gKi9cblxuLyoqXG4gKiBAY2FsbGJhY2sgYmFzaWNDYWxsYmFja1xuICogQHBhcmFtIHtFcnJvcn0gZXJyIEVycm9yIG9uIGVycm9yLCBvdGhlcndpc2UgbnVsbC5cbiAqIEBwYXJhbSB7Q29ubmVjdGlvbn0gW2Nvbm5lY3Rpb25dIEFjcXVpcmVkIGNvbm5lY3Rpb24uXG4gKi9cblxuLyoqXG4gKiBAY2FsbGJhY2sgYWNxdWlyZUNhbGxiYWNrXG4gKiBAcGFyYW0ge0Vycm9yfSBlcnIgRXJyb3Igb24gZXJyb3IsIG90aGVyd2lzZSBudWxsLlxuICogQHBhcmFtIHtDb25uZWN0aW9ufSBbY29ubmVjdGlvbl0gQWNxdWlyZWQgY29ubmVjdGlvbi5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnXSBDb25uZWN0aW9uIGNvbmZpZ1xuICovXG5cbi8qKlxuICogRGlzcGF0Y2hlZCBhZnRlciBjb25uZWN0aW9uIGhhcyBlc3RhYmxpc2hlZC5cbiAqIEBldmVudCBDb25uZWN0aW9uUG9vbCNjb25uZWN0XG4gKi9cblxuLyoqXG4gKiBEaXNwYXRjaGVkIGFmdGVyIGNvbm5lY3Rpb24gaGFzIGNsb3NlZCBhIHBvb2wgKGJ5IGNhbGxpbmcgY2xvc2UpLlxuICogQGV2ZW50IENvbm5lY3Rpb25Qb29sI2Nsb3NlXG4gKi9cblxuLyoqXG4gKiBEaXNwYXRjaGVkIHdoZW4gdHJhbnNhY3Rpb24gYmVnaW4uXG4gKiBAZXZlbnQgVHJhbnNhY3Rpb24jYmVnaW5cbiAqL1xuXG4vKipcbiAqIERpc3BhdGNoZWQgb24gc3VjY2Vzc2Z1bCBjb21taXQuXG4gKiBAZXZlbnQgVHJhbnNhY3Rpb24jY29tbWl0XG4gKi9cblxuLyoqXG4gKiBEaXNwYXRjaGVkIG9uIHN1Y2Nlc3NmdWwgcm9sbGJhY2suXG4gKiBAZXZlbnQgVHJhbnNhY3Rpb24jcm9sbGJhY2tcbiAqL1xuXG4vKipcbiAqIERpc3BhdGNoZWQgd2hlbiBtZXRhZGF0YSBmb3IgbmV3IHJlY29yZHNldCBhcmUgcGFyc2VkLlxuICogQGV2ZW50IFJlcXVlc3QjcmVjb3Jkc2V0XG4gKi9cblxuLyoqXG4gKiBEaXNwYXRjaGVkIHdoZW4gbmV3IHJvdyBpcyBwYXJzZWQuXG4gKiBAZXZlbnQgUmVxdWVzdCNyb3dcbiAqL1xuXG4vKipcbiAqIERpc3BhdGNoZWQgd2hlbiByZXF1ZXN0IGlzIGNvbXBsZXRlLlxuICogQGV2ZW50IFJlcXVlc3QjZG9uZVxuICovXG5cbi8qKlxuICogRGlzcGF0Y2hlZCBvbiBlcnJvci5cbiAqIEBldmVudCBSZXF1ZXN0I2Vycm9yXG4gKi9cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mssql/lib/base/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mssql/lib/base/prepared-statement.js":
/*!***********************************************************!*\
  !*** ./node_modules/mssql/lib/base/prepared-statement.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst debug = __webpack_require__(/*! debug */ \"(rsc)/./node_modules/debug/src/index.js\")('mssql:base')\nconst { EventEmitter } = __webpack_require__(/*! node:events */ \"node:events\")\nconst { IDS, objectHasProperty } = __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/mssql/lib/utils.js\")\nconst globalConnection = __webpack_require__(/*! ../global-connection */ \"(rsc)/./node_modules/mssql/lib/global-connection.js\")\nconst { TransactionError, PreparedStatementError } = __webpack_require__(/*! ../error */ \"(rsc)/./node_modules/mssql/lib/error/index.js\")\nconst shared = __webpack_require__(/*! ../shared */ \"(rsc)/./node_modules/mssql/lib/shared.js\")\nconst { TYPES, declare } = __webpack_require__(/*! ../datatypes */ \"(rsc)/./node_modules/mssql/lib/datatypes.js\")\n\n/**\n * Class PreparedStatement.\n *\n * IMPORTANT: Rememeber that each prepared statement means one reserved connection from the pool. Don't forget to unprepare a prepared statement!\n *\n * @property {String} statement Prepared SQL statement.\n */\n\nclass PreparedStatement extends EventEmitter {\n  /**\n   * Creates a new Prepared Statement.\n   *\n   * @param {ConnectionPool|Transaction} [holder]\n   */\n\n  constructor (parent) {\n    super()\n\n    IDS.add(this, 'PreparedStatement')\n    debug('ps(%d): created', IDS.get(this))\n\n    this.parent = parent || globalConnection.pool\n    this._handle = 0\n    this.prepared = false\n    this.parameters = {}\n  }\n\n  get config () {\n    return this.parent.config\n  }\n\n  get connected () {\n    return this.parent.connected\n  }\n\n  /**\n   * Acquire connection from connection pool.\n   *\n   * @param {Request} request Request.\n   * @param {ConnectionPool~acquireCallback} [callback] A callback which is called after connection has established, or an error has occurred. If omited, method returns Promise.\n   * @return {PreparedStatement|Promise}\n   */\n\n  acquire (request, callback) {\n    if (!this._acquiredConnection) {\n      setImmediate(callback, new PreparedStatementError('Statement is not prepared. Call prepare() first.', 'ENOTPREPARED'))\n      return this\n    }\n\n    if (this._activeRequest) {\n      setImmediate(callback, new TransactionError(\"Can't acquire connection for the request. There is another request in progress.\", 'EREQINPROG'))\n      return this\n    }\n\n    this._activeRequest = request\n    setImmediate(callback, null, this._acquiredConnection, this._acquiredConfig)\n    return this\n  }\n\n  /**\n   * Release connection back to the pool.\n   *\n   * @param {Connection} connection Previously acquired connection.\n   * @return {PreparedStatement}\n   */\n\n  release (connection) {\n    if (connection === this._acquiredConnection) {\n      this._activeRequest = null\n    }\n\n    return this\n  }\n\n  /**\n   * Add an input parameter to the prepared statement.\n   *\n   * @param {String} name Name of the input parameter without @ char.\n   * @param {*} type SQL data type of input parameter.\n   * @return {PreparedStatement}\n   */\n\n  input (name, type) {\n    if (/--| |\\/\\*|\\*\\/|'/.test(name)) {\n      throw new PreparedStatementError(`SQL injection warning for param '${name}'`, 'EINJECT')\n    }\n\n    if (arguments.length < 2) {\n      throw new PreparedStatementError('Invalid number of arguments. 2 arguments expected.', 'EARGS')\n    }\n\n    if (type instanceof Function) {\n      type = type()\n    }\n\n    if (objectHasProperty(this.parameters, name)) {\n      throw new PreparedStatementError(`The parameter name ${name} has already been declared. Parameter names must be unique`, 'EDUPEPARAM')\n    }\n\n    this.parameters[name] = {\n      name,\n      type: type.type,\n      io: 1,\n      length: type.length,\n      scale: type.scale,\n      precision: type.precision,\n      tvpType: type.tvpType\n    }\n\n    return this\n  }\n\n  /**\n   * Replace an input parameter on the request.\n   *\n   * @param {String} name Name of the input parameter without @ char.\n   * @param {*} [type] SQL data type of input parameter. If you omit type, module automaticaly decide which SQL data type should be used based on JS data type.\n   * @param {*} value Input parameter value. `undefined` and `NaN` values are automatically converted to `null` values.\n   * @return {Request}\n   */\n\n  replaceInput (name, type, value) {\n    delete this.parameters[name]\n\n    return this.input(name, type, value)\n  }\n\n  /**\n   * Add an output parameter to the prepared statement.\n   *\n   * @param {String} name Name of the output parameter without @ char.\n   * @param {*} type SQL data type of output parameter.\n   * @return {PreparedStatement}\n   */\n\n  output (name, type) {\n    if (/--| |\\/\\*|\\*\\/|'/.test(name)) {\n      throw new PreparedStatementError(`SQL injection warning for param '${name}'`, 'EINJECT')\n    }\n\n    if (arguments.length < 2) {\n      throw new PreparedStatementError('Invalid number of arguments. 2 arguments expected.', 'EARGS')\n    }\n\n    if (type instanceof Function) type = type()\n\n    if (objectHasProperty(this.parameters, name)) {\n      throw new PreparedStatementError(`The parameter name ${name} has already been declared. Parameter names must be unique`, 'EDUPEPARAM')\n    }\n\n    this.parameters[name] = {\n      name,\n      type: type.type,\n      io: 2,\n      length: type.length,\n      scale: type.scale,\n      precision: type.precision\n    }\n\n    return this\n  }\n\n  /**\n   * Replace an output parameter on the request.\n   *\n   * @param {String} name Name of the output parameter without @ char.\n   * @param {*} type SQL data type of output parameter.\n   * @return {PreparedStatement}\n   */\n\n  replaceOutput (name, type) {\n    delete this.parameters[name]\n\n    return this.output(name, type)\n  }\n\n  /**\n   * Prepare a statement.\n   *\n   * @param {String} statement SQL statement to prepare.\n   * @param {basicCallback} [callback] A callback which is called after preparation has completed, or an error has occurred. If omited, method returns Promise.\n   * @return {PreparedStatement|Promise}\n   */\n\n  prepare (statement, callback) {\n    if (typeof callback === 'function') {\n      this._prepare(statement, callback)\n      return this\n    }\n\n    return new shared.Promise((resolve, reject) => {\n      this._prepare(statement, err => {\n        if (err) return reject(err)\n        resolve(this)\n      })\n    })\n  }\n\n  /**\n   * @private\n   * @param {String} statement\n   * @param {basicCallback} callback\n   */\n\n  _prepare (statement, callback) {\n    debug('ps(%d): prepare', IDS.get(this))\n\n    if (typeof statement === 'function') {\n      callback = statement\n      statement = undefined\n    }\n\n    if (this.prepared) {\n      return setImmediate(callback, new PreparedStatementError('Statement is already prepared.', 'EALREADYPREPARED'))\n    }\n\n    this.statement = statement || this.statement\n\n    this.parent.acquire(this, (err, connection, config) => {\n      if (err) return callback(err)\n\n      this._acquiredConnection = connection\n      this._acquiredConfig = config\n\n      const req = new shared.driver.Request(this)\n      req.stream = false\n      req.output('handle', TYPES.Int)\n      req.input('params', TYPES.NVarChar, ((() => {\n        const result = []\n        for (const name in this.parameters) {\n          if (!objectHasProperty(this.parameters, name)) {\n            continue\n          }\n          const param = this.parameters[name]\n          result.push(`@${name} ${declare(param.type, param)}${param.io === 2 ? ' output' : ''}`)\n        }\n        return result\n      })()).join(','))\n      req.input('stmt', TYPES.NVarChar, this.statement)\n      req.execute('sp_prepare', (err, result) => {\n        if (err) {\n          this.parent.release(this._acquiredConnection)\n          this._acquiredConnection = null\n          this._acquiredConfig = null\n\n          return callback(err)\n        }\n\n        debug('ps(%d): prepared', IDS.get(this))\n\n        this._handle = result.output.handle\n        this.prepared = true\n\n        callback(null)\n      })\n    })\n  }\n\n  /**\n   * Execute a prepared statement.\n   *\n   * @param {Object} values An object whose names correspond to the names of parameters that were added to the prepared statement before it was prepared.\n   * @param {basicCallback} [callback] A callback which is called after execution has completed, or an error has occurred. If omited, method returns Promise.\n   * @return {Request|Promise}\n   */\n\n  execute (values, callback) {\n    if (this.stream || (typeof callback === 'function')) {\n      return this._execute(values, callback)\n    }\n\n    return new shared.Promise((resolve, reject) => {\n      this._execute(values, (err, recordset) => {\n        if (err) return reject(err)\n        resolve(recordset)\n      })\n    })\n  }\n\n  /**\n   * @private\n   * @param {Object} values\n   * @param {basicCallback} callback\n   */\n\n  _execute (values, callback) {\n    const req = new shared.driver.Request(this)\n    req.stream = this.stream\n    req.arrayRowMode = this.arrayRowMode\n    req.input('handle', TYPES.Int, this._handle)\n\n    // copy parameters with new values\n    for (const name in this.parameters) {\n      if (!objectHasProperty(this.parameters, name)) {\n        continue\n      }\n      const param = this.parameters[name]\n      req.parameters[name] = {\n        name,\n        type: param.type,\n        io: param.io,\n        value: values[name],\n        length: param.length,\n        scale: param.scale,\n        precision: param.precision\n      }\n    }\n\n    req.execute('sp_execute', (err, result) => {\n      if (err) return callback(err)\n\n      callback(null, result)\n    })\n\n    return req\n  }\n\n  /**\n   * Unprepare a prepared statement.\n   *\n   * @param {basicCallback} [callback] A callback which is called after unpreparation has completed, or an error has occurred. If omited, method returns Promise.\n   * @return {PreparedStatement|Promise}\n   */\n\n  unprepare (callback) {\n    if (typeof callback === 'function') {\n      this._unprepare(callback)\n      return this\n    }\n\n    return new shared.Promise((resolve, reject) => {\n      this._unprepare(err => {\n        if (err) return reject(err)\n        resolve()\n      })\n    })\n  }\n\n  /**\n   * @private\n   * @param {basicCallback} callback\n   */\n\n  _unprepare (callback) {\n    debug('ps(%d): unprepare', IDS.get(this))\n\n    if (!this.prepared) {\n      return setImmediate(callback, new PreparedStatementError('Statement is not prepared. Call prepare() first.', 'ENOTPREPARED'))\n    }\n\n    if (this._activeRequest) {\n      return setImmediate(callback, new TransactionError(\"Can't unprepare the statement. There is a request in progress.\", 'EREQINPROG'))\n    }\n\n    const req = new shared.driver.Request(this)\n    req.stream = false\n    req.input('handle', TYPES.Int, this._handle)\n    req.execute('sp_unprepare', err => {\n      if (err) return callback(err)\n\n      this.parent.release(this._acquiredConnection)\n      this._acquiredConnection = null\n      this._acquiredConfig = null\n      this._handle = 0\n      this.prepared = false\n\n      debug('ps(%d): unprepared', IDS.get(this))\n\n      return callback(null)\n    })\n  }\n}\n\nmodule.exports = PreparedStatement\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mssql/lib/base/prepared-statement.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mssql/lib/base/request.js":
/*!************************************************!*\
  !*** ./node_modules/mssql/lib/base/request.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst debug = __webpack_require__(/*! debug */ \"(rsc)/./node_modules/debug/src/index.js\")('mssql:base')\nconst { EventEmitter } = __webpack_require__(/*! node:events */ \"node:events\")\nconst { Readable } = __webpack_require__(/*! node:stream */ \"node:stream\")\nconst { IDS, objectHasProperty } = __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/mssql/lib/utils.js\")\nconst globalConnection = __webpack_require__(/*! ../global-connection */ \"(rsc)/./node_modules/mssql/lib/global-connection.js\")\nconst { RequestError, ConnectionError } = __webpack_require__(/*! ../error */ \"(rsc)/./node_modules/mssql/lib/error/index.js\")\nconst { TYPES } = __webpack_require__(/*! ../datatypes */ \"(rsc)/./node_modules/mssql/lib/datatypes.js\")\nconst shared = __webpack_require__(/*! ../shared */ \"(rsc)/./node_modules/mssql/lib/shared.js\")\n\n/**\n * Class Request.\n *\n * @property {Transaction} transaction Reference to transaction when request was created in transaction.\n * @property {*} parameters Collection of input and output parameters.\n * @property {Boolean} canceled `true` if request was canceled.\n *\n * @fires Request#recordset\n * @fires Request#row\n * @fires Request#done\n * @fires Request#error\n */\n\nclass Request extends EventEmitter {\n  /**\n   * Create new Request.\n   *\n   * @param {Connection|ConnectionPool|Transaction|PreparedStatement} parent If omitted, global connection is used instead.\n   */\n\n  constructor (parent) {\n    super()\n\n    IDS.add(this, 'Request')\n    debug('request(%d): created', IDS.get(this))\n\n    this.canceled = false\n    this._paused = false\n    this.parent = parent || globalConnection.pool\n    this.parameters = {}\n    this.stream = null\n    this.arrayRowMode = null\n  }\n\n  get paused () {\n    return this._paused\n  }\n\n  /**\n   * Generate sql string and set input parameters from tagged template string.\n   *\n   * @param {Template literal} template\n   * @return {String}\n   */\n  template () {\n    const values = Array.prototype.slice.call(arguments)\n    const strings = values.shift()\n    return this._template(strings, values)\n  }\n\n  /**\n   * Fetch request from tagged template string.\n   *\n   * @private\n   * @param {Array} strings\n   * @param {Array} values\n   * @param {String} [method] If provided, method is automatically called with serialized command on this object.\n   * @return {Request}\n   */\n\n  _template (strings, values, method) {\n    const command = [strings[0]]\n\n    for (let index = 0; index < values.length; index++) {\n      const value = values[index]\n      // if value is an array, prepare each items as it's own comma separated parameter\n      if (Array.isArray(value)) {\n        for (let parameterIndex = 0; parameterIndex < value.length; parameterIndex++) {\n          this.input(`param${index + 1}_${parameterIndex}`, value[parameterIndex])\n          command.push(`@param${index + 1}_${parameterIndex}`)\n          if (parameterIndex < value.length - 1) {\n            command.push(', ')\n          }\n        }\n        command.push(strings[index + 1])\n      } else {\n        this.input(`param${index + 1}`, value)\n        command.push(`@param${index + 1}`, strings[index + 1])\n      }\n    }\n\n    if (method) {\n      return this[method](command.join(''))\n    } else {\n      return command.join('')\n    }\n  }\n\n  /**\n   * Add an input parameter to the request.\n   *\n   * @param {String} name Name of the input parameter without @ char.\n   * @param {*} [type] SQL data type of input parameter. If you omit type, module automaticaly decide which SQL data type should be used based on JS data type.\n   * @param {*} value Input parameter value. `undefined` and `NaN` values are automatically converted to `null` values.\n   * @return {Request}\n   */\n\n  input (name, type, value) {\n    if (/--| |\\/\\*|\\*\\/|'/.test(name)) {\n      throw new RequestError(`SQL injection warning for param '${name}'`, 'EINJECT')\n    }\n\n    if (arguments.length < 2) {\n      throw new RequestError('Invalid number of arguments. At least 2 arguments expected.', 'EARGS')\n    } else if (arguments.length === 2) {\n      value = type\n      type = shared.getTypeByValue(value)\n    }\n\n    // support for custom data types\n    if (value && typeof value.valueOf === 'function' && !(value instanceof Date)) value = value.valueOf()\n\n    if (value === undefined) value = null // undefined to null\n    if (typeof value === 'number' && isNaN(value)) value = null // NaN to null\n    if (type instanceof Function) type = type()\n\n    if (objectHasProperty(this.parameters, name)) {\n      throw new RequestError(`The parameter name ${name} has already been declared. Parameter names must be unique`, 'EDUPEPARAM')\n    }\n\n    this.parameters[name] = {\n      name,\n      type: type.type,\n      io: 1,\n      value,\n      length: type.length,\n      scale: type.scale,\n      precision: type.precision,\n      tvpType: type.tvpType\n    }\n\n    return this\n  }\n\n  /**\n   * Replace an input parameter on the request.\n   *\n   * @param {String} name Name of the input parameter without @ char.\n   * @param {*} [type] SQL data type of input parameter. If you omit type, module automaticaly decide which SQL data type should be used based on JS data type.\n   * @param {*} value Input parameter value. `undefined` and `NaN` values are automatically converted to `null` values.\n   * @return {Request}\n   */\n\n  replaceInput (name, type, value) {\n    delete this.parameters[name]\n\n    return this.input(name, type, value)\n  }\n\n  /**\n   * Add an output parameter to the request.\n   *\n   * @param {String} name Name of the output parameter without @ char.\n   * @param {*} type SQL data type of output parameter.\n   * @param {*} [value] Output parameter value initial value. `undefined` and `NaN` values are automatically converted to `null` values. Optional.\n   * @return {Request}\n   */\n\n  output (name, type, value) {\n    if (!type) { type = TYPES.NVarChar }\n\n    if (/--| |\\/\\*|\\*\\/|'/.test(name)) {\n      throw new RequestError(`SQL injection warning for param '${name}'`, 'EINJECT')\n    }\n\n    if ((type === TYPES.Text) || (type === TYPES.NText) || (type === TYPES.Image)) {\n      throw new RequestError('Deprecated types (Text, NText, Image) are not supported as OUTPUT parameters.', 'EDEPRECATED')\n    }\n\n    // support for custom data types\n    if (value && typeof value.valueOf === 'function' && !(value instanceof Date)) value = value.valueOf()\n\n    if (value === undefined) value = null // undefined to null\n    if (typeof value === 'number' && isNaN(value)) value = null // NaN to null\n    if (type instanceof Function) type = type()\n\n    if (objectHasProperty(this.parameters, name)) {\n      throw new RequestError(`The parameter name ${name} has already been declared. Parameter names must be unique`, 'EDUPEPARAM')\n    }\n\n    this.parameters[name] = {\n      name,\n      type: type.type,\n      io: 2,\n      value,\n      length: type.length,\n      scale: type.scale,\n      precision: type.precision\n    }\n\n    return this\n  }\n\n  /**\n   * Replace an output parameter on the request.\n   *\n   * @param {String} name Name of the output parameter without @ char.\n   * @param {*} type SQL data type of output parameter.\n   * @param {*} [value] Output parameter value initial value. `undefined` and `NaN` values are automatically converted to `null` values. Optional.\n   * @return {Request}\n   */\n\n  replaceOutput (name, type, value) {\n    delete this.parameters[name]\n\n    return this.output(name, type, value)\n  }\n\n  /**\n   * Execute the SQL batch.\n   *\n   * @param {String} batch T-SQL batch to be executed.\n   * @param {Request~requestCallback} [callback] A callback which is called after execution has completed, or an error has occurred. If omited, method returns Promise.\n   * @return {Request|Promise}\n   */\n\n  batch (batch, callback) {\n    if (this.stream === null && this.parent) this.stream = this.parent.config.stream\n    if (this.arrayRowMode === null && this.parent) this.arrayRowMode = this.parent.config.arrayRowMode\n    this.rowsAffected = 0\n\n    if (typeof callback === 'function') {\n      this._batch(batch, (err, recordsets, output, rowsAffected) => {\n        if (this.stream) {\n          if (err) this.emit('error', err)\n          err = null\n\n          this.emit('done', {\n            output,\n            rowsAffected\n          })\n        }\n\n        if (err) return callback(err)\n        callback(null, {\n          recordsets,\n          recordset: recordsets && recordsets[0],\n          output,\n          rowsAffected\n        })\n      })\n      return this\n    }\n\n    // Check is method was called as tagged template\n    if (typeof batch === 'object') {\n      const values = Array.prototype.slice.call(arguments)\n      const strings = values.shift()\n      batch = this._template(strings, values)\n    }\n\n    return new shared.Promise((resolve, reject) => {\n      this._batch(batch, (err, recordsets, output, rowsAffected) => {\n        if (this.stream) {\n          if (err) this.emit('error', err)\n          err = null\n\n          this.emit('done', {\n            output,\n            rowsAffected\n          })\n        }\n\n        if (err) return reject(err)\n        resolve({\n          recordsets,\n          recordset: recordsets && recordsets[0],\n          output,\n          rowsAffected\n        })\n      })\n    })\n  }\n\n  /**\n   * @private\n   * @param {String} batch\n   * @param {Request~requestCallback} callback\n   */\n\n  _batch (batch, callback) {\n    if (!this.parent) {\n      return setImmediate(callback, new RequestError('No connection is specified for that request.', 'ENOCONN'))\n    }\n\n    if (!this.parent.connected) {\n      return setImmediate(callback, new ConnectionError('Connection is closed.', 'ECONNCLOSED'))\n    }\n\n    this.canceled = false\n    setImmediate(callback)\n  }\n\n  /**\n   * Bulk load.\n   *\n   * @param {Table} table SQL table.\n   * @param {object} [options] Options to be passed to the underlying driver (tedious only).\n   * @param {Request~bulkCallback} [callback] A callback which is called after bulk load has completed, or an error has occurred. If omited, method returns Promise.\n   * @return {Request|Promise}\n   */\n\n  bulk (table, options, callback) {\n    if (typeof options === 'function') {\n      callback = options\n      options = {}\n    } else if (typeof options === 'undefined') {\n      options = {}\n    }\n\n    if (this.stream === null && this.parent) this.stream = this.parent.config.stream\n    if (this.arrayRowMode === null && this.parent) this.arrayRowMode = this.parent.config.arrayRowMode\n\n    if (this.stream || typeof callback === 'function') {\n      this._bulk(table, options, (err, rowsAffected) => {\n        if (this.stream) {\n          if (err) this.emit('error', err)\n          return this.emit('done', {\n            rowsAffected\n          })\n        }\n\n        if (err) return callback(err)\n        callback(null, {\n          rowsAffected\n        })\n      })\n      return this\n    }\n\n    return new shared.Promise((resolve, reject) => {\n      this._bulk(table, options, (err, rowsAffected) => {\n        if (err) return reject(err)\n        resolve({\n          rowsAffected\n        })\n      })\n    })\n  }\n\n  /**\n   * @private\n   * @param {Table} table\n   * @param {object} options\n   * @param {Request~bulkCallback} callback\n   */\n\n  _bulk (table, options, callback) {\n    if (!this.parent) {\n      return setImmediate(callback, new RequestError('No connection is specified for that request.', 'ENOCONN'))\n    }\n\n    if (!this.parent.connected) {\n      return setImmediate(callback, new ConnectionError('Connection is closed.', 'ECONNCLOSED'))\n    }\n\n    this.canceled = false\n    setImmediate(callback)\n  }\n\n  /**\n   * Wrap original request in a Readable stream that supports back pressure and return.\n   * It also sets request to `stream` mode and pulls all rows from all recordsets to a given stream.\n   *\n   * @param {Object} streamOptions - optional options to configure the readable stream with like highWaterMark\n   * @return {Stream}\n   */\n  toReadableStream (streamOptions = {}) {\n    this.stream = true\n    this.pause()\n    const readableStream = new Readable({\n      ...streamOptions,\n      objectMode: true,\n      read: (/* size */) => {\n        this.resume()\n      }\n    })\n    this.on('row', (row) => {\n      if (!readableStream.push(row)) {\n        this.pause()\n      }\n    })\n    this.on('error', (error) => {\n      readableStream.emit('error', error)\n    })\n    this.on('done', () => {\n      readableStream.push(null)\n    })\n    return readableStream\n  }\n\n  /**\n   * Wrap original request in a Readable stream that supports back pressure and pipe to the Writable stream.\n   * It also sets request to `stream` mode and pulls all rows from all recordsets to a given stream.\n   *\n   * @param {Stream} stream Stream to pipe data into.\n   * @return {Stream}\n   */\n  pipe (writableStream) {\n    const readableStream = this.toReadableStream()\n    return readableStream.pipe(writableStream)\n  }\n\n  /**\n   * Execute the SQL command.\n   *\n   * @param {String} command T-SQL command to be executed.\n   * @param {Request~requestCallback} [callback] A callback which is called after execution has completed, or an error has occurred. If omited, method returns Promise.\n   * @return {Request|Promise}\n   */\n\n  query (command, callback) {\n    if (this.stream === null && this.parent) this.stream = this.parent.config.stream\n    if (this.arrayRowMode === null && this.parent) this.arrayRowMode = this.parent.config.arrayRowMode\n    this.rowsAffected = 0\n\n    if (typeof callback === 'function') {\n      this._query(command, (err, recordsets, output, rowsAffected, columns) => {\n        if (this.stream) {\n          if (err) this.emit('error', err)\n          err = null\n\n          this.emit('done', {\n            output,\n            rowsAffected\n          })\n        }\n\n        if (err) return callback(err)\n        const result = {\n          recordsets,\n          recordset: recordsets && recordsets[0],\n          output,\n          rowsAffected\n        }\n        if (this.arrayRowMode) result.columns = columns\n        callback(null, result)\n      })\n      return this\n    }\n\n    // Check is method was called as tagged template\n    if (typeof command === 'object') {\n      const values = Array.prototype.slice.call(arguments)\n      const strings = values.shift()\n      command = this._template(strings, values)\n    }\n\n    return new shared.Promise((resolve, reject) => {\n      this._query(command, (err, recordsets, output, rowsAffected, columns) => {\n        if (this.stream) {\n          if (err) this.emit('error', err)\n          err = null\n\n          this.emit('done', {\n            output,\n            rowsAffected\n          })\n        }\n\n        if (err) return reject(err)\n        const result = {\n          recordsets,\n          recordset: recordsets && recordsets[0],\n          output,\n          rowsAffected\n        }\n        if (this.arrayRowMode) result.columns = columns\n        resolve(result)\n      })\n    })\n  }\n\n  /**\n   * @private\n   * @param {String} command\n   * @param {Request~bulkCallback} callback\n   */\n\n  _query (command, callback) {\n    if (!this.parent) {\n      return setImmediate(callback, new RequestError('No connection is specified for that request.', 'ENOCONN'))\n    }\n\n    if (!this.parent.connected) {\n      return setImmediate(callback, new ConnectionError('Connection is closed.', 'ECONNCLOSED'))\n    }\n\n    this.canceled = false\n    setImmediate(callback)\n  }\n\n  /**\n   * Call a stored procedure.\n   *\n   * @param {String} procedure Name of the stored procedure to be executed.\n   * @param {Request~requestCallback} [callback] A callback which is called after execution has completed, or an error has occurred. If omited, method returns Promise.\n   * @return {Request|Promise}\n   */\n\n  execute (command, callback) {\n    if (this.stream === null && this.parent) this.stream = this.parent.config.stream\n    if (this.arrayRowMode === null && this.parent) this.arrayRowMode = this.parent.config.arrayRowMode\n    this.rowsAffected = 0\n\n    if (typeof callback === 'function') {\n      this._execute(command, (err, recordsets, output, returnValue, rowsAffected, columns) => {\n        if (this.stream) {\n          if (err) this.emit('error', err)\n          err = null\n\n          this.emit('done', {\n            output,\n            rowsAffected,\n            returnValue\n          })\n        }\n\n        if (err) return callback(err)\n        const result = {\n          recordsets,\n          recordset: recordsets && recordsets[0],\n          output,\n          rowsAffected,\n          returnValue\n        }\n        if (this.arrayRowMode) result.columns = columns\n        callback(null, result)\n      })\n      return this\n    }\n\n    return new shared.Promise((resolve, reject) => {\n      this._execute(command, (err, recordsets, output, returnValue, rowsAffected, columns) => {\n        if (this.stream) {\n          if (err) this.emit('error', err)\n          err = null\n\n          this.emit('done', {\n            output,\n            rowsAffected,\n            returnValue\n          })\n        }\n\n        if (err) return reject(err)\n        const result = {\n          recordsets,\n          recordset: recordsets && recordsets[0],\n          output,\n          rowsAffected,\n          returnValue\n        }\n        if (this.arrayRowMode) result.columns = columns\n        resolve(result)\n      })\n    })\n  }\n\n  /**\n   * @private\n   * @param {String} procedure\n   * @param {Request~bulkCallback} callback\n   */\n\n  _execute (procedure, callback) {\n    if (!this.parent) {\n      return setImmediate(callback, new RequestError('No connection is specified for that request.', 'ENOCONN'))\n    }\n\n    if (!this.parent.connected) {\n      return setImmediate(callback, new ConnectionError('Connection is closed.', 'ECONNCLOSED'))\n    }\n\n    this.canceled = false\n    setImmediate(callback)\n  }\n\n  /**\n   * Cancel currently executed request.\n   *\n   * @return {Boolean}\n   */\n\n  cancel () {\n    this._cancel()\n    return true\n  }\n\n  /**\n   * @private\n   */\n\n  _cancel () {\n    this.canceled = true\n  }\n\n  pause () {\n    if (this.stream) {\n      this._pause()\n      return true\n    }\n    return false\n  }\n\n  _pause () {\n    this._paused = true\n  }\n\n  resume () {\n    if (this.stream) {\n      this._resume()\n      return true\n    }\n    return false\n  }\n\n  _resume () {\n    this._paused = false\n  }\n\n  _setCurrentRequest (request) {\n    this._currentRequest = request\n    if (this._paused) {\n      this.pause()\n    }\n    return this\n  }\n}\n\nmodule.exports = Request\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mssql/lib/base/request.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mssql/lib/base/transaction.js":
/*!****************************************************!*\
  !*** ./node_modules/mssql/lib/base/transaction.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst debug = __webpack_require__(/*! debug */ \"(rsc)/./node_modules/debug/src/index.js\")('mssql:base')\nconst { EventEmitter } = __webpack_require__(/*! node:events */ \"node:events\")\nconst { IDS } = __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/mssql/lib/utils.js\")\nconst globalConnection = __webpack_require__(/*! ../global-connection */ \"(rsc)/./node_modules/mssql/lib/global-connection.js\")\nconst { TransactionError } = __webpack_require__(/*! ../error */ \"(rsc)/./node_modules/mssql/lib/error/index.js\")\nconst shared = __webpack_require__(/*! ../shared */ \"(rsc)/./node_modules/mssql/lib/shared.js\")\nconst ISOLATION_LEVEL = __webpack_require__(/*! ../isolationlevel */ \"(rsc)/./node_modules/mssql/lib/isolationlevel.js\")\n\n/**\n * Class Transaction.\n *\n * @property {Number} isolationLevel Controls the locking and row versioning behavior of TSQL statements issued by a connection. READ_COMMITTED by default.\n * @property {String} name Transaction name. Empty string by default.\n *\n * @fires Transaction#begin\n * @fires Transaction#commit\n * @fires Transaction#rollback\n */\n\nclass Transaction extends EventEmitter {\n  /**\n   * Create new Transaction.\n   *\n   * @param {Connection} [parent] If ommited, global connection is used instead.\n   */\n\n  constructor (parent) {\n    super()\n\n    IDS.add(this, 'Transaction')\n    debug('transaction(%d): created', IDS.get(this))\n\n    this.parent = parent || globalConnection.pool\n    this.isolationLevel = Transaction.defaultIsolationLevel\n    this.name = ''\n  }\n\n  get config () {\n    return this.parent.config\n  }\n\n  get connected () {\n    return this.parent.connected\n  }\n\n  /**\n   * Acquire connection from connection pool.\n   *\n   * @param {Request} request Request.\n   * @param {ConnectionPool~acquireCallback} [callback] A callback which is called after connection has established, or an error has occurred. If omited, method returns Promise.\n   * @return {Transaction|Promise}\n   */\n\n  acquire (request, callback) {\n    if (!this._acquiredConnection) {\n      setImmediate(callback, new TransactionError('Transaction has not begun. Call begin() first.', 'ENOTBEGUN'))\n      return this\n    }\n\n    if (this._activeRequest) {\n      setImmediate(callback, new TransactionError(\"Can't acquire connection for the request. There is another request in progress.\", 'EREQINPROG'))\n      return this\n    }\n\n    this._activeRequest = request\n    setImmediate(callback, null, this._acquiredConnection, this._acquiredConfig)\n    return this\n  }\n\n  /**\n   * Release connection back to the pool.\n   *\n   * @param {Connection} connection Previously acquired connection.\n   * @return {Transaction}\n   */\n\n  release (connection) {\n    if (connection === this._acquiredConnection) {\n      this._activeRequest = null\n    }\n\n    return this\n  }\n\n  /**\n   * Begin a transaction.\n   *\n   * @param {Number} [isolationLevel] Controls the locking and row versioning behavior of TSQL statements issued by a connection.\n   * @param {basicCallback} [callback] A callback which is called after transaction has began, or an error has occurred. If omited, method returns Promise.\n   * @return {Transaction|Promise}\n   */\n\n  begin (isolationLevel, callback) {\n    if (isolationLevel instanceof Function) {\n      callback = isolationLevel\n      isolationLevel = undefined\n    }\n\n    if (typeof callback === 'function') {\n      this._begin(isolationLevel, err => {\n        if (!err) {\n          this.emit('begin')\n        }\n        callback(err)\n      })\n      return this\n    }\n\n    return new shared.Promise((resolve, reject) => {\n      this._begin(isolationLevel, err => {\n        if (err) return reject(err)\n        this.emit('begin')\n        resolve(this)\n      })\n    })\n  }\n\n  /**\n   * @private\n   * @param {Number} [isolationLevel]\n   * @param {basicCallback} [callback]\n   * @return {Transaction}\n   */\n\n  _begin (isolationLevel, callback) {\n    if (this._acquiredConnection) {\n      return setImmediate(callback, new TransactionError('Transaction has already begun.', 'EALREADYBEGUN'))\n    }\n\n    this._aborted = false\n    this._rollbackRequested = false\n    if (isolationLevel) {\n      if (Object.keys(ISOLATION_LEVEL).some(key => {\n        return ISOLATION_LEVEL[key] === isolationLevel\n      })) {\n        this.isolationLevel = isolationLevel\n      } else {\n        throw new TransactionError('Invalid isolation level.')\n      }\n    }\n\n    setImmediate(callback)\n  }\n\n  /**\n   * Commit a transaction.\n   *\n   * @param {basicCallback} [callback] A callback which is called after transaction has commited, or an error has occurred. If omited, method returns Promise.\n   * @return {Transaction|Promise}\n   */\n\n  commit (callback) {\n    if (typeof callback === 'function') {\n      this._commit(err => {\n        if (!err) {\n          this.emit('commit')\n        }\n        callback(err)\n      })\n      return this\n    }\n\n    return new shared.Promise((resolve, reject) => {\n      this._commit(err => {\n        if (err) return reject(err)\n        this.emit('commit')\n        resolve()\n      })\n    })\n  }\n\n  /**\n   * @private\n   * @param {basicCallback} [callback]\n   * @return {Transaction}\n   */\n\n  _commit (callback) {\n    if (this._aborted) {\n      return setImmediate(callback, new TransactionError('Transaction has been aborted.', 'EABORT'))\n    }\n\n    if (!this._acquiredConnection) {\n      return setImmediate(callback, new TransactionError('Transaction has not begun. Call begin() first.', 'ENOTBEGUN'))\n    }\n\n    if (this._activeRequest) {\n      return setImmediate(callback, new TransactionError(\"Can't commit transaction. There is a request in progress.\", 'EREQINPROG'))\n    }\n\n    setImmediate(callback)\n  }\n\n  /**\n   * Returns new request using this transaction.\n   *\n   * @return {Request}\n   */\n\n  request () {\n    return new shared.driver.Request(this)\n  }\n\n  /**\n   * Rollback a transaction.\n   *\n   * @param {basicCallback} [callback] A callback which is called after transaction has rolled back, or an error has occurred. If omited, method returns Promise.\n   * @return {Transaction|Promise}\n   */\n\n  rollback (callback) {\n    if (typeof callback === 'function') {\n      this._rollback(err => {\n        if (!err) {\n          this.emit('rollback', this._aborted)\n        }\n        callback(err)\n      })\n      return this\n    }\n\n    return new shared.Promise((resolve, reject) => {\n      return this._rollback(err => {\n        if (err) return reject(err)\n        this.emit('rollback', this._aborted)\n        resolve()\n      })\n    })\n  }\n\n  /**\n   * @private\n   * @param {basicCallback} [callback]\n   * @return {Transaction}\n   */\n\n  _rollback (callback) {\n    if (this._aborted) {\n      return setImmediate(callback, new TransactionError('Transaction has been aborted.', 'EABORT'))\n    }\n\n    if (!this._acquiredConnection) {\n      return setImmediate(callback, new TransactionError('Transaction has not begun. Call begin() first.', 'ENOTBEGUN'))\n    }\n\n    if (this._activeRequest) {\n      return setImmediate(callback, new TransactionError(\"Can't rollback transaction. There is a request in progress.\", 'EREQINPROG'))\n    }\n\n    this._rollbackRequested = true\n\n    setImmediate(callback)\n  }\n}\n\n/**\n * Default isolation level used for any transactions that don't explicitly specify an isolation level.\n *\n * @type {number}\n */\nTransaction.defaultIsolationLevel = ISOLATION_LEVEL.READ_COMMITTED\n\nmodule.exports = Transaction\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mssql/lib/base/transaction.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mssql/lib/datatypes.js":
/*!*********************************************!*\
  !*** ./node_modules/mssql/lib/datatypes.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst objectHasProperty = (__webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/mssql/lib/utils.js\").objectHasProperty)\nconst inspect = Symbol.for('nodejs.util.inspect.custom')\n\nconst TYPES = {\n  VarChar (length) {\n    return { type: TYPES.VarChar, length }\n  },\n  NVarChar (length) {\n    return { type: TYPES.NVarChar, length }\n  },\n  Text () {\n    return { type: TYPES.Text }\n  },\n  Int () {\n    return { type: TYPES.Int }\n  },\n  BigInt () {\n    return { type: TYPES.BigInt }\n  },\n  TinyInt () {\n    return { type: TYPES.TinyInt }\n  },\n  SmallInt () {\n    return { type: TYPES.SmallInt }\n  },\n  Bit () {\n    return { type: TYPES.Bit }\n  },\n  Float () {\n    return { type: TYPES.Float }\n  },\n  Numeric (precision, scale) {\n    return { type: TYPES.Numeric, precision, scale }\n  },\n  Decimal (precision, scale) {\n    return { type: TYPES.Decimal, precision, scale }\n  },\n  Real () {\n    return { type: TYPES.Real }\n  },\n  Date () {\n    return { type: TYPES.Date }\n  },\n  DateTime () {\n    return { type: TYPES.DateTime }\n  },\n  DateTime2 (scale) {\n    return { type: TYPES.DateTime2, scale }\n  },\n  DateTimeOffset (scale) {\n    return { type: TYPES.DateTimeOffset, scale }\n  },\n  SmallDateTime () {\n    return { type: TYPES.SmallDateTime }\n  },\n  Time (scale) {\n    return { type: TYPES.Time, scale }\n  },\n  UniqueIdentifier () {\n    return { type: TYPES.UniqueIdentifier }\n  },\n  SmallMoney () {\n    return { type: TYPES.SmallMoney }\n  },\n  Money () {\n    return { type: TYPES.Money }\n  },\n  Binary (length) {\n    return { type: TYPES.Binary, length }\n  },\n  VarBinary (length) {\n    return { type: TYPES.VarBinary, length }\n  },\n  Image () {\n    return { type: TYPES.Image }\n  },\n  Xml () {\n    return { type: TYPES.Xml }\n  },\n  Char (length) {\n    return { type: TYPES.Char, length }\n  },\n  NChar (length) {\n    return { type: TYPES.NChar, length }\n  },\n  NText () {\n    return { type: TYPES.NText }\n  },\n  TVP (tvpType) {\n    return { type: TYPES.TVP, tvpType }\n  },\n  UDT () {\n    return { type: TYPES.UDT }\n  },\n  Geography () {\n    return { type: TYPES.Geography }\n  },\n  Geometry () {\n    return { type: TYPES.Geometry }\n  },\n  Variant () {\n    return { type: TYPES.Variant }\n  }\n}\n\nmodule.exports.TYPES = TYPES\nmodule.exports.DECLARATIONS = {}\n\nconst zero = function (value, length) {\n  if (length == null) length = 2\n\n  value = String(value)\n  if (value.length < length) {\n    for (let i = 1; i <= length - value.length; i++) {\n      value = `0${value}`\n    }\n  }\n  return value\n}\n\nfor (const key in TYPES) {\n  if (objectHasProperty(TYPES, key)) {\n    const value = TYPES[key]\n    value.declaration = key.toLowerCase()\n    module.exports.DECLARATIONS[value.declaration] = value;\n\n    ((key, value) => {\n      value[inspect] = () => `[sql.${key}]`\n    })(key, value)\n  }\n}\n\nmodule.exports.declare = (type, options) => {\n  switch (type) {\n    case TYPES.VarChar: case TYPES.VarBinary:\n      return `${type.declaration} (${options.length > 8000 ? 'MAX' : (options.length == null ? 'MAX' : options.length)})`\n    case TYPES.NVarChar:\n      return `${type.declaration} (${options.length > 4000 ? 'MAX' : (options.length == null ? 'MAX' : options.length)})`\n    case TYPES.Char: case TYPES.NChar: case TYPES.Binary:\n      return `${type.declaration} (${options.length == null ? 1 : options.length})`\n    case TYPES.Decimal: case TYPES.Numeric:\n      return `${type.declaration} (${options.precision == null ? 18 : options.precision}, ${options.scale == null ? 0 : options.scale})`\n    case TYPES.Time: case TYPES.DateTime2: case TYPES.DateTimeOffset:\n      return `${type.declaration} (${options.scale == null ? 7 : options.scale})`\n    case TYPES.TVP:\n      return `${options.tvpType} readonly`\n    default:\n      return type.declaration\n  }\n}\n\nmodule.exports.cast = (value, type, options) => {\n  if (value == null) {\n    return null\n  }\n\n  switch (typeof value) {\n    case 'string':\n      return `N'${value.replace(/'/g, '\\'\\'')}'`\n\n    case 'number':\n    case 'bigint':\n      return value\n\n    case 'boolean':\n      return value ? 1 : 0\n\n    case 'object':\n      if (value instanceof Date) {\n        let ns = value.getUTCMilliseconds() / 1000\n        if (value.nanosecondDelta != null) {\n          ns += value.nanosecondDelta\n        }\n        const scale = options.scale == null ? 7 : options.scale\n\n        if (scale > 0) {\n          ns = String(ns).substr(1, scale + 1)\n        } else {\n          ns = ''\n        }\n\n        return `N'${value.getUTCFullYear()}-${zero(value.getUTCMonth() + 1)}-${zero(value.getUTCDate())} ${zero(value.getUTCHours())}:${zero(value.getUTCMinutes())}:${zero(value.getUTCSeconds())}${ns}'`\n      } else if (Buffer.isBuffer(value)) {\n        return `0x${value.toString('hex')}`\n      }\n\n      return null\n\n    default:\n      return null\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mssql/lib/datatypes.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mssql/lib/error/connection-error.js":
/*!**********************************************************!*\
  !*** ./node_modules/mssql/lib/error/connection-error.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst MSSQLError = __webpack_require__(/*! ./mssql-error */ \"(rsc)/./node_modules/mssql/lib/error/mssql-error.js\")\n\n/**\n * Class ConnectionError.\n */\n\nclass ConnectionError extends MSSQLError {\n  /**\n   * Creates a new ConnectionError.\n   *\n   * @param {String} message Error message.\n   * @param {String} [code] Error code.\n   */\n\n  constructor (message, code) {\n    super(message, code)\n\n    this.name = 'ConnectionError'\n  }\n}\n\nmodule.exports = ConnectionError\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbXNzcWwvbGliL2Vycm9yL2Nvbm5lY3Rpb24tZXJyb3IuanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVosbUJBQW1CLG1CQUFPLENBQUMsMEVBQWU7O0FBRTFDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckI7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcVmFsZW50aW5hXFxPbmVEcml2ZVxcRGVza3RvcFxcS2F0YSBHaXRcXEthdGEtRmx1am9HZW5lcmljb2RlQXByb2JhY2lvblxcbm9kZV9tb2R1bGVzXFxtc3NxbFxcbGliXFxlcnJvclxcY29ubmVjdGlvbi1lcnJvci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuY29uc3QgTVNTUUxFcnJvciA9IHJlcXVpcmUoJy4vbXNzcWwtZXJyb3InKVxuXG4vKipcbiAqIENsYXNzIENvbm5lY3Rpb25FcnJvci5cbiAqL1xuXG5jbGFzcyBDb25uZWN0aW9uRXJyb3IgZXh0ZW5kcyBNU1NRTEVycm9yIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgQ29ubmVjdGlvbkVycm9yLlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZSBFcnJvciBtZXNzYWdlLlxuICAgKiBAcGFyYW0ge1N0cmluZ30gW2NvZGVdIEVycm9yIGNvZGUuXG4gICAqL1xuXG4gIGNvbnN0cnVjdG9yIChtZXNzYWdlLCBjb2RlKSB7XG4gICAgc3VwZXIobWVzc2FnZSwgY29kZSlcblxuICAgIHRoaXMubmFtZSA9ICdDb25uZWN0aW9uRXJyb3InXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBDb25uZWN0aW9uRXJyb3JcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mssql/lib/error/connection-error.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mssql/lib/error/index.js":
/*!***********************************************!*\
  !*** ./node_modules/mssql/lib/error/index.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst ConnectionError = __webpack_require__(/*! ./connection-error */ \"(rsc)/./node_modules/mssql/lib/error/connection-error.js\")\nconst MSSQLError = __webpack_require__(/*! ./mssql-error */ \"(rsc)/./node_modules/mssql/lib/error/mssql-error.js\")\nconst PreparedStatementError = __webpack_require__(/*! ./prepared-statement-error */ \"(rsc)/./node_modules/mssql/lib/error/prepared-statement-error.js\")\nconst RequestError = __webpack_require__(/*! ./request-error */ \"(rsc)/./node_modules/mssql/lib/error/request-error.js\")\nconst TransactionError = __webpack_require__(/*! ./transaction-error */ \"(rsc)/./node_modules/mssql/lib/error/transaction-error.js\")\n\nmodule.exports = {\n  ConnectionError,\n  MSSQLError,\n  PreparedStatementError,\n  RequestError,\n  TransactionError\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbXNzcWwvbGliL2Vycm9yL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaLHdCQUF3QixtQkFBTyxDQUFDLG9GQUFvQjtBQUNwRCxtQkFBbUIsbUJBQU8sQ0FBQywwRUFBZTtBQUMxQywrQkFBK0IsbUJBQU8sQ0FBQyxvR0FBNEI7QUFDbkUscUJBQXFCLG1CQUFPLENBQUMsOEVBQWlCO0FBQzlDLHlCQUF5QixtQkFBTyxDQUFDLHNGQUFxQjs7QUFFdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcVmFsZW50aW5hXFxPbmVEcml2ZVxcRGVza3RvcFxcS2F0YSBHaXRcXEthdGEtRmx1am9HZW5lcmljb2RlQXByb2JhY2lvblxcbm9kZV9tb2R1bGVzXFxtc3NxbFxcbGliXFxlcnJvclxcaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IENvbm5lY3Rpb25FcnJvciA9IHJlcXVpcmUoJy4vY29ubmVjdGlvbi1lcnJvcicpXG5jb25zdCBNU1NRTEVycm9yID0gcmVxdWlyZSgnLi9tc3NxbC1lcnJvcicpXG5jb25zdCBQcmVwYXJlZFN0YXRlbWVudEVycm9yID0gcmVxdWlyZSgnLi9wcmVwYXJlZC1zdGF0ZW1lbnQtZXJyb3InKVxuY29uc3QgUmVxdWVzdEVycm9yID0gcmVxdWlyZSgnLi9yZXF1ZXN0LWVycm9yJylcbmNvbnN0IFRyYW5zYWN0aW9uRXJyb3IgPSByZXF1aXJlKCcuL3RyYW5zYWN0aW9uLWVycm9yJylcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIENvbm5lY3Rpb25FcnJvcixcbiAgTVNTUUxFcnJvcixcbiAgUHJlcGFyZWRTdGF0ZW1lbnRFcnJvcixcbiAgUmVxdWVzdEVycm9yLFxuICBUcmFuc2FjdGlvbkVycm9yXG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mssql/lib/error/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mssql/lib/error/mssql-error.js":
/*!*****************************************************!*\
  !*** ./node_modules/mssql/lib/error/mssql-error.js ***!
  \*****************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nclass MSSQLError extends Error {\n  /**\n   * Creates a new ConnectionError.\n   *\n   * @param {String} message Error message.\n   * @param {String} [code] Error code.\n   */\n\n  constructor (message, code) {\n    if (message instanceof Error) {\n      super(message.message)\n      this.code = message.code || code\n\n      Error.captureStackTrace(this, this.constructor)\n      Object.defineProperty(this, 'originalError', { enumerable: true, value: message })\n    } else {\n      super(message)\n      this.code = code\n    }\n\n    this.name = 'MSSQLError'\n  }\n}\n\nmodule.exports = MSSQLError\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbXNzcWwvbGliL2Vycm9yL21zc3FsLWVycm9yLmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHFEQUFxRCxrQ0FBa0M7QUFDdkYsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcVmFsZW50aW5hXFxPbmVEcml2ZVxcRGVza3RvcFxcS2F0YSBHaXRcXEthdGEtRmx1am9HZW5lcmljb2RlQXByb2JhY2lvblxcbm9kZV9tb2R1bGVzXFxtc3NxbFxcbGliXFxlcnJvclxcbXNzcWwtZXJyb3IuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmNsYXNzIE1TU1FMRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IENvbm5lY3Rpb25FcnJvci5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UgRXJyb3IgbWVzc2FnZS5cbiAgICogQHBhcmFtIHtTdHJpbmd9IFtjb2RlXSBFcnJvciBjb2RlLlxuICAgKi9cblxuICBjb25zdHJ1Y3RvciAobWVzc2FnZSwgY29kZSkge1xuICAgIGlmIChtZXNzYWdlIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgIHN1cGVyKG1lc3NhZ2UubWVzc2FnZSlcbiAgICAgIHRoaXMuY29kZSA9IG1lc3NhZ2UuY29kZSB8fCBjb2RlXG5cbiAgICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIHRoaXMuY29uc3RydWN0b3IpXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ29yaWdpbmFsRXJyb3InLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiBtZXNzYWdlIH0pXG4gICAgfSBlbHNlIHtcbiAgICAgIHN1cGVyKG1lc3NhZ2UpXG4gICAgICB0aGlzLmNvZGUgPSBjb2RlXG4gICAgfVxuXG4gICAgdGhpcy5uYW1lID0gJ01TU1FMRXJyb3InXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBNU1NRTEVycm9yXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mssql/lib/error/mssql-error.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mssql/lib/error/prepared-statement-error.js":
/*!******************************************************************!*\
  !*** ./node_modules/mssql/lib/error/prepared-statement-error.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst MSSQLError = __webpack_require__(/*! ./mssql-error */ \"(rsc)/./node_modules/mssql/lib/error/mssql-error.js\")\n\n/**\n * Class PreparedStatementError.\n */\n\nclass PreparedStatementError extends MSSQLError {\n  /**\n   * Creates a new PreparedStatementError.\n   *\n   * @param {String} message Error message.\n   * @param {String} [code] Error code.\n   */\n\n  constructor (message, code) {\n    super(message, code)\n\n    this.name = 'PreparedStatementError'\n  }\n}\n\nmodule.exports = PreparedStatementError\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbXNzcWwvbGliL2Vycm9yL3ByZXBhcmVkLXN0YXRlbWVudC1lcnJvci5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWixtQkFBbUIsbUJBQU8sQ0FBQywwRUFBZTs7QUFFMUM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQjs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxWYWxlbnRpbmFcXE9uZURyaXZlXFxEZXNrdG9wXFxLYXRhIEdpdFxcS2F0YS1GbHVqb0dlbmVyaWNvZGVBcHJvYmFjaW9uXFxub2RlX21vZHVsZXNcXG1zc3FsXFxsaWJcXGVycm9yXFxwcmVwYXJlZC1zdGF0ZW1lbnQtZXJyb3IuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IE1TU1FMRXJyb3IgPSByZXF1aXJlKCcuL21zc3FsLWVycm9yJylcblxuLyoqXG4gKiBDbGFzcyBQcmVwYXJlZFN0YXRlbWVudEVycm9yLlxuICovXG5cbmNsYXNzIFByZXBhcmVkU3RhdGVtZW50RXJyb3IgZXh0ZW5kcyBNU1NRTEVycm9yIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgUHJlcGFyZWRTdGF0ZW1lbnRFcnJvci5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UgRXJyb3IgbWVzc2FnZS5cbiAgICogQHBhcmFtIHtTdHJpbmd9IFtjb2RlXSBFcnJvciBjb2RlLlxuICAgKi9cblxuICBjb25zdHJ1Y3RvciAobWVzc2FnZSwgY29kZSkge1xuICAgIHN1cGVyKG1lc3NhZ2UsIGNvZGUpXG5cbiAgICB0aGlzLm5hbWUgPSAnUHJlcGFyZWRTdGF0ZW1lbnRFcnJvcidcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFByZXBhcmVkU3RhdGVtZW50RXJyb3JcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mssql/lib/error/prepared-statement-error.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mssql/lib/error/request-error.js":
/*!*******************************************************!*\
  !*** ./node_modules/mssql/lib/error/request-error.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst MSSQLError = __webpack_require__(/*! ./mssql-error */ \"(rsc)/./node_modules/mssql/lib/error/mssql-error.js\")\n\n/**\n * Class RequestError.\n *\n * @property {String} number Error number.\n * @property {Number} lineNumber Line number.\n * @property {String} state Error state.\n * @property {String} class Error class.\n * @property {String} serverName Server name.\n * @property {String} procName Procedure name.\n */\n\nclass RequestError extends MSSQLError {\n  /**\n   * Creates a new RequestError.\n   *\n   * @param {String} message Error message.\n   * @param {String} [code] Error code.\n   */\n\n  constructor (message, code) {\n    super(message, code)\n    if (message instanceof Error) {\n      if (message.info) {\n        this.number = message.info.number || message.code // err.code is returned by msnodesql driver\n        this.lineNumber = message.info.lineNumber\n        this.state = message.info.state || message.sqlstate // err.sqlstate is returned by msnodesql driver\n        this.class = message.info.class\n        this.serverName = message.info.serverName\n        this.procName = message.info.procName\n      } else {\n        // Use err attributes returned by msnodesql driver\n        this.number = message.code\n        this.lineNumber = message.lineNumber\n        this.state = message.sqlstate\n        this.class = message.severity\n        this.serverName = message.serverName\n        this.procName = message.procName\n      }\n    }\n\n    this.name = 'RequestError'\n    const parsedMessage = (/^\\[Microsoft\\]\\[SQL Server Native Client 11\\.0\\](?:\\[SQL Server\\])?([\\s\\S]*)$/).exec(this.message)\n    if (parsedMessage) {\n      this.message = parsedMessage[1]\n    }\n  }\n}\n\nmodule.exports = RequestError\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbXNzcWwvbGliL2Vycm9yL3JlcXVlc3QtZXJyb3IuanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVosbUJBQW1CLG1CQUFPLENBQUMsMEVBQWU7O0FBRTFDO0FBQ0E7QUFDQTtBQUNBLGNBQWMsUUFBUTtBQUN0QixjQUFjLFFBQVE7QUFDdEIsY0FBYyxRQUFRO0FBQ3RCLGNBQWMsUUFBUTtBQUN0QixjQUFjLFFBQVE7QUFDdEIsY0FBYyxRQUFRO0FBQ3RCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcVmFsZW50aW5hXFxPbmVEcml2ZVxcRGVza3RvcFxcS2F0YSBHaXRcXEthdGEtRmx1am9HZW5lcmljb2RlQXByb2JhY2lvblxcbm9kZV9tb2R1bGVzXFxtc3NxbFxcbGliXFxlcnJvclxccmVxdWVzdC1lcnJvci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuY29uc3QgTVNTUUxFcnJvciA9IHJlcXVpcmUoJy4vbXNzcWwtZXJyb3InKVxuXG4vKipcbiAqIENsYXNzIFJlcXVlc3RFcnJvci5cbiAqXG4gKiBAcHJvcGVydHkge1N0cmluZ30gbnVtYmVyIEVycm9yIG51bWJlci5cbiAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBsaW5lTnVtYmVyIExpbmUgbnVtYmVyLlxuICogQHByb3BlcnR5IHtTdHJpbmd9IHN0YXRlIEVycm9yIHN0YXRlLlxuICogQHByb3BlcnR5IHtTdHJpbmd9IGNsYXNzIEVycm9yIGNsYXNzLlxuICogQHByb3BlcnR5IHtTdHJpbmd9IHNlcnZlck5hbWUgU2VydmVyIG5hbWUuXG4gKiBAcHJvcGVydHkge1N0cmluZ30gcHJvY05hbWUgUHJvY2VkdXJlIG5hbWUuXG4gKi9cblxuY2xhc3MgUmVxdWVzdEVycm9yIGV4dGVuZHMgTVNTUUxFcnJvciB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IFJlcXVlc3RFcnJvci5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UgRXJyb3IgbWVzc2FnZS5cbiAgICogQHBhcmFtIHtTdHJpbmd9IFtjb2RlXSBFcnJvciBjb2RlLlxuICAgKi9cblxuICBjb25zdHJ1Y3RvciAobWVzc2FnZSwgY29kZSkge1xuICAgIHN1cGVyKG1lc3NhZ2UsIGNvZGUpXG4gICAgaWYgKG1lc3NhZ2UgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgaWYgKG1lc3NhZ2UuaW5mbykge1xuICAgICAgICB0aGlzLm51bWJlciA9IG1lc3NhZ2UuaW5mby5udW1iZXIgfHwgbWVzc2FnZS5jb2RlIC8vIGVyci5jb2RlIGlzIHJldHVybmVkIGJ5IG1zbm9kZXNxbCBkcml2ZXJcbiAgICAgICAgdGhpcy5saW5lTnVtYmVyID0gbWVzc2FnZS5pbmZvLmxpbmVOdW1iZXJcbiAgICAgICAgdGhpcy5zdGF0ZSA9IG1lc3NhZ2UuaW5mby5zdGF0ZSB8fCBtZXNzYWdlLnNxbHN0YXRlIC8vIGVyci5zcWxzdGF0ZSBpcyByZXR1cm5lZCBieSBtc25vZGVzcWwgZHJpdmVyXG4gICAgICAgIHRoaXMuY2xhc3MgPSBtZXNzYWdlLmluZm8uY2xhc3NcbiAgICAgICAgdGhpcy5zZXJ2ZXJOYW1lID0gbWVzc2FnZS5pbmZvLnNlcnZlck5hbWVcbiAgICAgICAgdGhpcy5wcm9jTmFtZSA9IG1lc3NhZ2UuaW5mby5wcm9jTmFtZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gVXNlIGVyciBhdHRyaWJ1dGVzIHJldHVybmVkIGJ5IG1zbm9kZXNxbCBkcml2ZXJcbiAgICAgICAgdGhpcy5udW1iZXIgPSBtZXNzYWdlLmNvZGVcbiAgICAgICAgdGhpcy5saW5lTnVtYmVyID0gbWVzc2FnZS5saW5lTnVtYmVyXG4gICAgICAgIHRoaXMuc3RhdGUgPSBtZXNzYWdlLnNxbHN0YXRlXG4gICAgICAgIHRoaXMuY2xhc3MgPSBtZXNzYWdlLnNldmVyaXR5XG4gICAgICAgIHRoaXMuc2VydmVyTmFtZSA9IG1lc3NhZ2Uuc2VydmVyTmFtZVxuICAgICAgICB0aGlzLnByb2NOYW1lID0gbWVzc2FnZS5wcm9jTmFtZVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMubmFtZSA9ICdSZXF1ZXN0RXJyb3InXG4gICAgY29uc3QgcGFyc2VkTWVzc2FnZSA9ICgvXlxcW01pY3Jvc29mdFxcXVxcW1NRTCBTZXJ2ZXIgTmF0aXZlIENsaWVudCAxMVxcLjBcXF0oPzpcXFtTUUwgU2VydmVyXFxdKT8oW1xcc1xcU10qKSQvKS5leGVjKHRoaXMubWVzc2FnZSlcbiAgICBpZiAocGFyc2VkTWVzc2FnZSkge1xuICAgICAgdGhpcy5tZXNzYWdlID0gcGFyc2VkTWVzc2FnZVsxXVxuICAgIH1cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJlcXVlc3RFcnJvclxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mssql/lib/error/request-error.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mssql/lib/error/transaction-error.js":
/*!***********************************************************!*\
  !*** ./node_modules/mssql/lib/error/transaction-error.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst MSSQLError = __webpack_require__(/*! ./mssql-error */ \"(rsc)/./node_modules/mssql/lib/error/mssql-error.js\")\n\n/**\n * Class TransactionError.\n */\n\nclass TransactionError extends MSSQLError {\n  /**\n   * Creates a new TransactionError.\n   *\n   * @param {String} message Error message.\n   * @param {String} [code] Error code.\n   */\n\n  constructor (message, code) {\n    super(message, code)\n\n    this.name = 'TransactionError'\n  }\n}\n\nmodule.exports = TransactionError\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbXNzcWwvbGliL2Vycm9yL3RyYW5zYWN0aW9uLWVycm9yLmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaLG1CQUFtQixtQkFBTyxDQUFDLDBFQUFlOztBQUUxQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXFZhbGVudGluYVxcT25lRHJpdmVcXERlc2t0b3BcXEthdGEgR2l0XFxLYXRhLUZsdWpvR2VuZXJpY29kZUFwcm9iYWNpb25cXG5vZGVfbW9kdWxlc1xcbXNzcWxcXGxpYlxcZXJyb3JcXHRyYW5zYWN0aW9uLWVycm9yLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5jb25zdCBNU1NRTEVycm9yID0gcmVxdWlyZSgnLi9tc3NxbC1lcnJvcicpXG5cbi8qKlxuICogQ2xhc3MgVHJhbnNhY3Rpb25FcnJvci5cbiAqL1xuXG5jbGFzcyBUcmFuc2FjdGlvbkVycm9yIGV4dGVuZHMgTVNTUUxFcnJvciB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IFRyYW5zYWN0aW9uRXJyb3IuXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlIEVycm9yIG1lc3NhZ2UuXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBbY29kZV0gRXJyb3IgY29kZS5cbiAgICovXG5cbiAgY29uc3RydWN0b3IgKG1lc3NhZ2UsIGNvZGUpIHtcbiAgICBzdXBlcihtZXNzYWdlLCBjb2RlKVxuXG4gICAgdGhpcy5uYW1lID0gJ1RyYW5zYWN0aW9uRXJyb3InXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBUcmFuc2FjdGlvbkVycm9yXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mssql/lib/error/transaction-error.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mssql/lib/global-connection.js":
/*!*****************************************************!*\
  !*** ./node_modules/mssql/lib/global-connection.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst shared = __webpack_require__(/*! ./shared */ \"(rsc)/./node_modules/mssql/lib/shared.js\")\n\nlet globalConnection = null\nconst globalConnectionHandlers = {}\n\n/**\n * Open global connection pool.\n *\n * @param {Object|String} config Connection configuration object or connection string.\n * @param {basicCallback} [callback] A callback which is called after connection has established, or an error has occurred. If omited, method returns Promise.\n * @return {Promise.<ConnectionPool>}\n */\n\nfunction connect (config, callback) {\n  if (!globalConnection) {\n    globalConnection = new shared.driver.ConnectionPool(config)\n\n    for (const event in globalConnectionHandlers) {\n      for (let i = 0, l = globalConnectionHandlers[event].length; i < l; i++) {\n        globalConnection.on(event, globalConnectionHandlers[event][i])\n      }\n    }\n\n    const ogClose = globalConnection.close\n\n    const globalClose = function (callback) {\n      // remove event handlers from the global connection\n      for (const event in globalConnectionHandlers) {\n        for (let i = 0, l = globalConnectionHandlers[event].length; i < l; i++) {\n          this.removeListener(event, globalConnectionHandlers[event][i])\n        }\n      }\n\n      // attach error handler to prevent process crash in case of error\n      this.on('error', err => {\n        if (globalConnectionHandlers.error) {\n          for (let i = 0, l = globalConnectionHandlers.error.length; i < l; i++) {\n            globalConnectionHandlers.error[i].call(this, err)\n          }\n        }\n      })\n\n      globalConnection = null\n      return ogClose.call(this, callback)\n    }\n\n    globalConnection.close = globalClose.bind(globalConnection)\n  }\n  if (typeof callback === 'function') {\n    return globalConnection.connect((err, connection) => {\n      if (err) {\n        globalConnection = null\n      }\n      callback(err, connection)\n    })\n  }\n  return globalConnection.connect().catch((err) => {\n    globalConnection = null\n    return shared.Promise.reject(err)\n  })\n}\n\n/**\n * Close all active connections in the global pool.\n *\n * @param {basicCallback} [callback] A callback which is called after connection has closed, or an error has occurred. If omited, method returns Promise.\n * @return {ConnectionPool|Promise}\n */\n\nfunction close (callback) {\n  if (globalConnection) {\n    const gc = globalConnection\n    globalConnection = null\n    return gc.close(callback)\n  }\n\n  if (typeof callback === 'function') {\n    setImmediate(callback)\n    return null\n  }\n\n  return new shared.Promise((resolve) => {\n    resolve(globalConnection)\n  })\n}\n\n/**\n * Attach event handler to global connection pool.\n *\n * @param {String} event Event name.\n * @param {Function} handler Event handler.\n * @return {ConnectionPool}\n */\n\nfunction on (event, handler) {\n  if (!globalConnectionHandlers[event]) globalConnectionHandlers[event] = []\n  globalConnectionHandlers[event].push(handler)\n\n  if (globalConnection) globalConnection.on(event, handler)\n  return globalConnection\n}\n\n/**\n * Detach event handler from global connection.\n *\n * @param {String} event Event name.\n * @param {Function} handler Event handler.\n * @return {ConnectionPool}\n */\n\nfunction removeListener (event, handler) {\n  if (!globalConnectionHandlers[event]) return globalConnection\n  const index = globalConnectionHandlers[event].indexOf(handler)\n  if (index === -1) return globalConnection\n  globalConnectionHandlers[event].splice(index, 1)\n  if (globalConnectionHandlers[event].length === 0) globalConnectionHandlers[event] = undefined\n\n  if (globalConnection) globalConnection.removeListener(event, handler)\n  return globalConnection\n}\n\n/**\n * Creates a new query using global connection from a tagged template string.\n *\n * @variation 1\n * @param {Array|String} strings Array of string literals or sql command.\n * @param {...*} keys Values.\n * @return {Request}\n */\n\n/**\n * Execute the SQL command.\n *\n * @variation 2\n * @param {String} command T-SQL command to be executed.\n * @param {Request~requestCallback} [callback] A callback which is called after execution has completed, or an error has occurred. If omited, method returns Promise.\n * @return {Request|Promise}\n */\n\nfunction query () {\n  if (typeof arguments[0] === 'string') { return new shared.driver.Request().query(arguments[0], arguments[1]) }\n\n  const values = Array.prototype.slice.call(arguments)\n  const strings = values.shift()\n\n  return new shared.driver.Request()._template(strings, values, 'query')\n}\n\n/**\n * Creates a new batch using global connection from a tagged template string.\n *\n * @variation 1\n * @param {Array} strings Array of string literals.\n * @param {...*} keys Values.\n * @return {Request}\n */\n\n/**\n * Execute the SQL command.\n *\n * @variation 2\n * @param {String} command T-SQL command to be executed.\n * @param {Request~requestCallback} [callback] A callback which is called after execution has completed, or an error has occurred. If omited, method returns Promise.\n * @return {Request|Promise}\n */\n\nfunction batch () {\n  if (typeof arguments[0] === 'string') { return new shared.driver.Request().batch(arguments[0], arguments[1]) }\n\n  const values = Array.prototype.slice.call(arguments)\n  const strings = values.shift()\n\n  return new shared.driver.Request()._template(strings, values, 'batch')\n}\n\nmodule.exports = {\n  batch,\n  close,\n  connect,\n  off: removeListener,\n  on,\n  query,\n  removeListener\n}\n\nObject.defineProperty(module.exports, \"pool\", ({\n  get: () => {\n    return globalConnection\n  },\n  set: () => {}\n}))\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mssql/lib/global-connection.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mssql/lib/isolationlevel.js":
/*!**************************************************!*\
  !*** ./node_modules/mssql/lib/isolationlevel.js ***!
  \**************************************************/
/***/ ((module) => {

"use strict";
eval("\n\nmodule.exports = {\n  READ_UNCOMMITTED: 0x01,\n  READ_COMMITTED: 0x02,\n  REPEATABLE_READ: 0x03,\n  SERIALIZABLE: 0x04,\n  SNAPSHOT: 0x05\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbXNzcWwvbGliL2lzb2xhdGlvbmxldmVsLmpzIiwibWFwcGluZ3MiOiJBQUFZOztBQUVaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXFZhbGVudGluYVxcT25lRHJpdmVcXERlc2t0b3BcXEthdGEgR2l0XFxLYXRhLUZsdWpvR2VuZXJpY29kZUFwcm9iYWNpb25cXG5vZGVfbW9kdWxlc1xcbXNzcWxcXGxpYlxcaXNvbGF0aW9ubGV2ZWwuanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBSRUFEX1VOQ09NTUlUVEVEOiAweDAxLFxuICBSRUFEX0NPTU1JVFRFRDogMHgwMixcbiAgUkVQRUFUQUJMRV9SRUFEOiAweDAzLFxuICBTRVJJQUxJWkFCTEU6IDB4MDQsXG4gIFNOQVBTSE9UOiAweDA1XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mssql/lib/isolationlevel.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mssql/lib/shared.js":
/*!******************************************!*\
  !*** ./node_modules/mssql/lib/shared.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst TYPES = (__webpack_require__(/*! ./datatypes */ \"(rsc)/./node_modules/mssql/lib/datatypes.js\").TYPES)\nconst Table = __webpack_require__(/*! ./table */ \"(rsc)/./node_modules/mssql/lib/table.js\")\n\nlet PromiseLibrary = Promise\nconst driver = {}\nconst map = []\n\n/**\n * Register you own type map.\n *\n * @path module.exports.map\n * @param {*} jstype JS data type.\n * @param {*} sqltype SQL data type.\n */\n\nmap.register = function (jstype, sqltype) {\n  for (let index = 0; index < this.length; index++) {\n    const item = this[index]\n    if (item.js === jstype) {\n      this.splice(index, 1)\n      break\n    }\n  }\n\n  this.push({\n    js: jstype,\n    sql: sqltype\n  })\n\n  return null\n}\n\nmap.register(String, TYPES.NVarChar)\nmap.register(Number, TYPES.Int)\nmap.register(Boolean, TYPES.Bit)\nmap.register(Date, TYPES.DateTime)\nmap.register(Buffer, TYPES.VarBinary)\nmap.register(Table, TYPES.TVP)\n\n/**\n * @ignore\n */\n\nconst getTypeByValue = function (value) {\n  if ((value === null) || (value === undefined)) { return TYPES.NVarChar }\n\n  switch (typeof value) {\n    case 'string':\n      for (const item of Array.from(map)) {\n        if (item.js === String) {\n          return item.sql\n        }\n      }\n\n      return TYPES.NVarChar\n\n    case 'number':\n      if (value % 1 === 0) {\n        if (value < -2147483648 || value > 2147483647) {\n          return TYPES.BigInt\n        } else {\n          return TYPES.Int\n        }\n      } else {\n        return TYPES.Float\n      }\n\n    case 'bigint':\n      if (value < -2147483648n || value > 2147483647n) {\n        return TYPES.BigInt\n      } else {\n        return TYPES.Int\n      }\n\n    case 'boolean':\n      for (const item of Array.from(map)) {\n        if (item.js === Boolean) {\n          return item.sql\n        }\n      }\n\n      return TYPES.Bit\n\n    case 'object':\n      for (const item of Array.from(map)) {\n        if (value instanceof item.js) {\n          return item.sql\n        }\n      }\n\n      return TYPES.NVarChar\n\n    default:\n      return TYPES.NVarChar\n  }\n}\n\nmodule.exports = {\n  driver,\n  getTypeByValue,\n  map\n}\n\nObject.defineProperty(module.exports, \"Promise\", ({\n  get: () => {\n    return PromiseLibrary\n  },\n  set: (value) => {\n    PromiseLibrary = value\n  }\n}))\n\nObject.defineProperty(module.exports, \"valueHandler\", ({\n  enumerable: true,\n  value: new Map(),\n  writable: false,\n  configurable: false\n}))\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbXNzcWwvbGliL3NoYXJlZC5qcyIsIm1hcHBpbmdzIjoiQUFBWTs7QUFFWixjQUFjLDZGQUE0QjtBQUMxQyxjQUFjLG1CQUFPLENBQUMsd0RBQVM7O0FBRS9CO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsR0FBRztBQUNkLFdBQVcsR0FBRztBQUNkOztBQUVBO0FBQ0Esc0JBQXNCLHFCQUFxQjtBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxtREFBbUQ7O0FBRW5EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsa0RBQWlEO0FBQ2pEO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxFQUFDOztBQUVGLHVEQUFzRDtBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsRUFBQyIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxWYWxlbnRpbmFcXE9uZURyaXZlXFxEZXNrdG9wXFxLYXRhIEdpdFxcS2F0YS1GbHVqb0dlbmVyaWNvZGVBcHJvYmFjaW9uXFxub2RlX21vZHVsZXNcXG1zc3FsXFxsaWJcXHNoYXJlZC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuY29uc3QgVFlQRVMgPSByZXF1aXJlKCcuL2RhdGF0eXBlcycpLlRZUEVTXG5jb25zdCBUYWJsZSA9IHJlcXVpcmUoJy4vdGFibGUnKVxuXG5sZXQgUHJvbWlzZUxpYnJhcnkgPSBQcm9taXNlXG5jb25zdCBkcml2ZXIgPSB7fVxuY29uc3QgbWFwID0gW11cblxuLyoqXG4gKiBSZWdpc3RlciB5b3Ugb3duIHR5cGUgbWFwLlxuICpcbiAqIEBwYXRoIG1vZHVsZS5leHBvcnRzLm1hcFxuICogQHBhcmFtIHsqfSBqc3R5cGUgSlMgZGF0YSB0eXBlLlxuICogQHBhcmFtIHsqfSBzcWx0eXBlIFNRTCBkYXRhIHR5cGUuXG4gKi9cblxubWFwLnJlZ2lzdGVyID0gZnVuY3Rpb24gKGpzdHlwZSwgc3FsdHlwZSkge1xuICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgdGhpcy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICBjb25zdCBpdGVtID0gdGhpc1tpbmRleF1cbiAgICBpZiAoaXRlbS5qcyA9PT0ganN0eXBlKSB7XG4gICAgICB0aGlzLnNwbGljZShpbmRleCwgMSlcbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgdGhpcy5wdXNoKHtcbiAgICBqczoganN0eXBlLFxuICAgIHNxbDogc3FsdHlwZVxuICB9KVxuXG4gIHJldHVybiBudWxsXG59XG5cbm1hcC5yZWdpc3RlcihTdHJpbmcsIFRZUEVTLk5WYXJDaGFyKVxubWFwLnJlZ2lzdGVyKE51bWJlciwgVFlQRVMuSW50KVxubWFwLnJlZ2lzdGVyKEJvb2xlYW4sIFRZUEVTLkJpdClcbm1hcC5yZWdpc3RlcihEYXRlLCBUWVBFUy5EYXRlVGltZSlcbm1hcC5yZWdpc3RlcihCdWZmZXIsIFRZUEVTLlZhckJpbmFyeSlcbm1hcC5yZWdpc3RlcihUYWJsZSwgVFlQRVMuVFZQKVxuXG4vKipcbiAqIEBpZ25vcmVcbiAqL1xuXG5jb25zdCBnZXRUeXBlQnlWYWx1ZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICBpZiAoKHZhbHVlID09PSBudWxsKSB8fCAodmFsdWUgPT09IHVuZGVmaW5lZCkpIHsgcmV0dXJuIFRZUEVTLk5WYXJDaGFyIH1cblxuICBzd2l0Y2ggKHR5cGVvZiB2YWx1ZSkge1xuICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgQXJyYXkuZnJvbShtYXApKSB7XG4gICAgICAgIGlmIChpdGVtLmpzID09PSBTdHJpbmcpIHtcbiAgICAgICAgICByZXR1cm4gaXRlbS5zcWxcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gVFlQRVMuTlZhckNoYXJcblxuICAgIGNhc2UgJ251bWJlcic6XG4gICAgICBpZiAodmFsdWUgJSAxID09PSAwKSB7XG4gICAgICAgIGlmICh2YWx1ZSA8IC0yMTQ3NDgzNjQ4IHx8IHZhbHVlID4gMjE0NzQ4MzY0Nykge1xuICAgICAgICAgIHJldHVybiBUWVBFUy5CaWdJbnRcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gVFlQRVMuSW50XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBUWVBFUy5GbG9hdFxuICAgICAgfVxuXG4gICAgY2FzZSAnYmlnaW50JzpcbiAgICAgIGlmICh2YWx1ZSA8IC0yMTQ3NDgzNjQ4biB8fCB2YWx1ZSA+IDIxNDc0ODM2NDduKSB7XG4gICAgICAgIHJldHVybiBUWVBFUy5CaWdJbnRcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBUWVBFUy5JbnRcbiAgICAgIH1cblxuICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAgZm9yIChjb25zdCBpdGVtIG9mIEFycmF5LmZyb20obWFwKSkge1xuICAgICAgICBpZiAoaXRlbS5qcyA9PT0gQm9vbGVhbikge1xuICAgICAgICAgIHJldHVybiBpdGVtLnNxbFxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBUWVBFUy5CaXRcblxuICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgQXJyYXkuZnJvbShtYXApKSB7XG4gICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIGl0ZW0uanMpIHtcbiAgICAgICAgICByZXR1cm4gaXRlbS5zcWxcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gVFlQRVMuTlZhckNoYXJcblxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gVFlQRVMuTlZhckNoYXJcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZHJpdmVyLFxuICBnZXRUeXBlQnlWYWx1ZSxcbiAgbWFwXG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUuZXhwb3J0cywgJ1Byb21pc2UnLCB7XG4gIGdldDogKCkgPT4ge1xuICAgIHJldHVybiBQcm9taXNlTGlicmFyeVxuICB9LFxuICBzZXQ6ICh2YWx1ZSkgPT4ge1xuICAgIFByb21pc2VMaWJyYXJ5ID0gdmFsdWVcbiAgfVxufSlcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZS5leHBvcnRzLCAndmFsdWVIYW5kbGVyJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICB2YWx1ZTogbmV3IE1hcCgpLFxuICB3cml0YWJsZTogZmFsc2UsXG4gIGNvbmZpZ3VyYWJsZTogZmFsc2Vcbn0pXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mssql/lib/shared.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mssql/lib/table.js":
/*!*****************************************!*\
  !*** ./node_modules/mssql/lib/table.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst TYPES = (__webpack_require__(/*! ./datatypes */ \"(rsc)/./node_modules/mssql/lib/datatypes.js\").TYPES)\nconst declareType = (__webpack_require__(/*! ./datatypes */ \"(rsc)/./node_modules/mssql/lib/datatypes.js\").declare)\nconst objectHasProperty = (__webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/mssql/lib/utils.js\").objectHasProperty)\n\nconst MAX = 65535 // (1 << 16) - 1\nconst JSON_COLUMN_ID = 'JSON_F52E2B61-18A1-11d1-B105-00805F49916B'\n\nfunction Table (name) {\n  if (name) {\n    const parsed = Table.parseName(name)\n    this.name = parsed.name\n    this.schema = parsed.schema\n    this.database = parsed.database\n    this.path = (this.database ? `[${this.database}].` : '') + (this.schema ? `[${this.schema}].` : '') + `[${this.name}]`\n    this.temporary = this.name.charAt(0) === '#'\n  }\n\n  this.columns = []\n  this.rows = []\n\n  Object.defineProperty(this.columns, 'add', {\n    value (name, column, options) {\n      if (column == null) {\n        throw new Error('Column data type is not defined.')\n      }\n      if (column instanceof Function) {\n        column = column()\n      }\n\n      options = options || {}\n      column.name = name;\n\n      ['nullable', 'primary', 'identity', 'readOnly', 'length'].forEach(prop => {\n        if (objectHasProperty(options, prop)) {\n          column[prop] = options[prop]\n        }\n      })\n\n      return this.push(column)\n    }\n  })\n\n  Object.defineProperty(this.rows, 'add', {\n    value () {\n      return this.push(Array.prototype.slice.call(arguments))\n    }\n  }\n  )\n\n  Object.defineProperty(this.rows, 'clear', {\n    value () {\n      return this.splice(0, this.length)\n    }\n  }\n  )\n}\n\n/*\n@private\n*/\n\nTable.prototype._makeBulk = function _makeBulk () {\n  for (let i = 0; i < this.columns.length; i++) {\n    const col = this.columns[i]\n    switch (col.type) {\n      case TYPES.Date:\n      case TYPES.DateTime:\n      case TYPES.DateTime2:\n        for (let j = 0; j < this.rows.length; j++) {\n          const dateValue = this.rows[j][i]\n          if (typeof dateValue === 'string' || typeof dateValue === 'number') {\n            const date = new Date(dateValue)\n            if (isNaN(date.getDate())) {\n              throw new TypeError('Invalid date value passed to bulk rows')\n            }\n            this.rows[j][i] = date\n          }\n        }\n        break\n\n      case TYPES.Xml:\n        col.type = TYPES.NVarChar(MAX).type\n        break\n\n      case TYPES.UDT:\n      case TYPES.Geography:\n      case TYPES.Geometry:\n        col.type = TYPES.VarBinary(MAX).type\n        break\n\n      default:\n        break\n    }\n  }\n\n  return this\n}\n\nTable.prototype.declare = function declare () {\n  const pkey = this.columns.filter(col => col.primary === true).map(col => `[${col.name}]`)\n  const cols = this.columns.map(col => {\n    const def = [`[${col.name}] ${declareType(col.type, col)}`]\n\n    if (col.nullable === true) {\n      def.push('null')\n    } else if (col.nullable === false) {\n      def.push('not null')\n    }\n\n    if (col.primary === true && pkey.length === 1) {\n      def.push('primary key')\n    }\n\n    return def.join(' ')\n  })\n\n  const constraint = pkey.length > 1 ? `, constraint [PK_${this.temporary ? this.name.substr(1) : this.name}] primary key (${pkey.join(', ')})` : ''\n  return `create table ${this.path} (${cols.join(', ')}${constraint})`\n}\n\nTable.fromRecordset = function fromRecordset (recordset, name) {\n  const t = new this(name)\n\n  for (const colName in recordset.columns) {\n    if (objectHasProperty(recordset.columns, colName)) {\n      const col = recordset.columns[colName]\n\n      t.columns.add(colName, {\n        type: col.type,\n        length: col.length,\n        scale: col.scale,\n        precision: col.precision\n      }, {\n        nullable: col.nullable,\n        identity: col.identity,\n        readOnly: col.readOnly\n      })\n    }\n  }\n\n  if (t.columns.length === 1 && t.columns[0].name === JSON_COLUMN_ID) {\n    for (let i = 0; i < recordset.length; i++) {\n      t.rows.add(JSON.stringify(recordset[i]))\n    }\n  } else {\n    for (let i = 0; i < recordset.length; i++) {\n      t.rows.add.apply(t.rows, t.columns.map(col => recordset[i][col.name]))\n    }\n  }\n\n  return t\n}\n\nTable.parseName = function parseName (name) {\n  const length = name.length\n  let cursor = -1\n  let buffer = ''\n  let escaped = false\n  const path = []\n\n  while (++cursor < length) {\n    const char = name.charAt(cursor)\n    if (char === '[') {\n      if (escaped) {\n        buffer += char\n      } else {\n        escaped = true\n      }\n    } else if (char === ']') {\n      if (escaped) {\n        escaped = false\n      } else {\n        throw new Error('Invalid table name.')\n      }\n    } else if (char === '.') {\n      if (escaped) {\n        buffer += char\n      } else {\n        path.push(buffer)\n        buffer = ''\n      }\n    } else {\n      buffer += char\n    }\n  }\n\n  if (buffer) {\n    path.push(buffer)\n  }\n\n  switch (path.length) {\n    case 1:\n      return {\n        name: path[0],\n        schema: null,\n        database: null\n      }\n\n    case 2:\n      return {\n        name: path[1],\n        schema: path[0],\n        database: null\n      }\n\n    case 3:\n      return {\n        name: path[2],\n        schema: path[1],\n        database: path[0]\n      }\n\n    default:\n      throw new Error('Invalid table name.')\n  }\n}\n\nmodule.exports = Table\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mssql/lib/table.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mssql/lib/tedious/connection-pool.js":
/*!***********************************************************!*\
  !*** ./node_modules/mssql/lib/tedious/connection-pool.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst tds = __webpack_require__(/*! tedious */ \"(rsc)/./node_modules/tedious/lib/tedious.js\")\nconst debug = __webpack_require__(/*! debug */ \"(rsc)/./node_modules/debug/src/index.js\")('mssql:tedi')\nconst BaseConnectionPool = __webpack_require__(/*! ../base/connection-pool */ \"(rsc)/./node_modules/mssql/lib/base/connection-pool.js\")\nconst { IDS } = __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/mssql/lib/utils.js\")\nconst shared = __webpack_require__(/*! ../shared */ \"(rsc)/./node_modules/mssql/lib/shared.js\")\nconst ConnectionError = __webpack_require__(/*! ../error/connection-error */ \"(rsc)/./node_modules/mssql/lib/error/connection-error.js\")\n\nclass ConnectionPool extends BaseConnectionPool {\n  _config () {\n    const cfg = {\n      server: this.config.server,\n      options: Object.assign({\n        encrypt: typeof this.config.encrypt === 'boolean' ? this.config.encrypt : true,\n        trustServerCertificate: typeof this.config.trustServerCertificate === 'boolean' ? this.config.trustServerCertificate : false\n      }, this.config.options),\n      authentication: Object.assign({\n        type: this.config.domain !== undefined ? 'ntlm' : this.config.authentication_type !== undefined ? this.config.authentication_type : 'default',\n        options: Object.entries({\n          userName: this.config.user,\n          password: this.config.password,\n          domain: this.config.domain,\n          clientId: this.config.clientId,\n          clientSecret: this.config.clientSecret,\n          tenantId: this.config.tenantId,\n          token: this.config.token,\n          msiEndpoint: this.config.msiEndpoint,\n          msiSecret: this.config.msiSecret\n        }).reduce((acc, [key, val]) => {\n          if (typeof val !== 'undefined') {\n            return { ...acc, [key]: val }\n          }\n          return acc\n        }, {})\n      }, this.config.authentication)\n    }\n\n    cfg.options.database = cfg.options.database || this.config.database\n    cfg.options.port = cfg.options.port || this.config.port\n    cfg.options.connectTimeout = cfg.options.connectTimeout ?? this.config.connectionTimeout ?? this.config.timeout ?? 15000\n    cfg.options.requestTimeout = cfg.options.requestTimeout ?? this.config.requestTimeout ?? this.config.timeout ?? 15000\n    cfg.options.tdsVersion = cfg.options.tdsVersion || '7_4'\n    cfg.options.rowCollectionOnDone = cfg.options.rowCollectionOnDone || false\n    cfg.options.rowCollectionOnRequestCompletion = cfg.options.rowCollectionOnRequestCompletion || false\n    cfg.options.useColumnNames = cfg.options.useColumnNames || false\n    cfg.options.appName = cfg.options.appName || 'node-mssql'\n\n    // tedious always connect via tcp when port is specified\n    if (cfg.options.instanceName) delete cfg.options.port\n\n    if (isNaN(cfg.options.requestTimeout)) cfg.options.requestTimeout = 15000\n    if (cfg.options.requestTimeout === Infinity || cfg.options.requestTimeout < 0) cfg.options.requestTimeout = 0\n\n    if (!cfg.options.debug && this.config.debug) {\n      cfg.options.debug = {\n        packet: true,\n        token: true,\n        data: true,\n        payload: true\n      }\n    }\n    return cfg\n  }\n\n  _poolCreate () {\n    return new shared.Promise((resolve, reject) => {\n      const resolveOnce = (v) => {\n        resolve(v)\n        resolve = reject = () => {}\n      }\n      const rejectOnce = (e) => {\n        reject(e)\n        resolve = reject = () => {}\n      }\n      let tedious\n      try {\n        tedious = new tds.Connection(this._config())\n      } catch (err) {\n        rejectOnce(err)\n        return\n      }\n      tedious.connect(err => {\n        if (err) {\n          err = new ConnectionError(err)\n          return rejectOnce(err)\n        }\n\n        debug('connection(%d): established', IDS.get(tedious))\n        this.collation = tedious.databaseCollation\n        resolveOnce(tedious)\n      })\n      IDS.add(tedious, 'Connection')\n      debug('pool(%d): connection #%d created', IDS.get(this), IDS.get(tedious))\n      debug('connection(%d): establishing', IDS.get(tedious))\n\n      tedious.on('end', () => {\n        const err = new ConnectionError('The connection ended without ever completing the connection')\n        rejectOnce(err)\n      })\n      tedious.on('error', err => {\n        if (err.code === 'ESOCKET') {\n          tedious.hasError = true\n        } else {\n          this.emit('error', err)\n        }\n        rejectOnce(err)\n      })\n\n      if (this.config.debug) {\n        tedious.on('debug', this.emit.bind(this, 'debug', tedious))\n      }\n      if (typeof this.config.beforeConnect === 'function') {\n        this.config.beforeConnect(tedious)\n      }\n    })\n  }\n\n  _poolValidate (tedious) {\n    if (tedious && !tedious.closed && !tedious.hasError) {\n      return !this.config.validateConnection || new shared.Promise((resolve) => {\n        const req = new tds.Request('SELECT 1;', (err) => {\n          resolve(!err)\n        })\n        tedious.execSql(req)\n      })\n    }\n    return false\n  }\n\n  _poolDestroy (tedious) {\n    return new shared.Promise((resolve, reject) => {\n      if (!tedious) {\n        resolve()\n        return\n      }\n      debug('connection(%d): destroying', IDS.get(tedious))\n\n      if (tedious.closed) {\n        debug('connection(%d): already closed', IDS.get(tedious))\n        resolve()\n      } else {\n        tedious.once('end', () => {\n          debug('connection(%d): destroyed', IDS.get(tedious))\n          resolve()\n        })\n\n        tedious.close()\n      }\n    })\n  }\n}\n\nmodule.exports = ConnectionPool\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mssql/lib/tedious/connection-pool.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mssql/lib/tedious/index.js":
/*!*************************************************!*\
  !*** ./node_modules/mssql/lib/tedious/index.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst base = __webpack_require__(/*! ../base */ \"(rsc)/./node_modules/mssql/lib/base/index.js\")\nconst ConnectionPool = __webpack_require__(/*! ./connection-pool */ \"(rsc)/./node_modules/mssql/lib/tedious/connection-pool.js\")\nconst Transaction = __webpack_require__(/*! ./transaction */ \"(rsc)/./node_modules/mssql/lib/tedious/transaction.js\")\nconst Request = __webpack_require__(/*! ./request */ \"(rsc)/./node_modules/mssql/lib/tedious/request.js\")\n\nmodule.exports = Object.assign({\n  ConnectionPool,\n  Transaction,\n  Request,\n  PreparedStatement: base.PreparedStatement\n}, base.exports)\n\nObject.defineProperty(module.exports, \"Promise\", ({\n  enumerable: true,\n  get: () => {\n    return base.Promise\n  },\n  set: (value) => {\n    base.Promise = value\n  }\n}))\n\nObject.defineProperty(module.exports, \"valueHandler\", ({\n  enumerable: true,\n  value: base.valueHandler,\n  writable: false,\n  configurable: false\n}))\n\nbase.driver.name = 'tedious'\nbase.driver.ConnectionPool = ConnectionPool\nbase.driver.Transaction = Transaction\nbase.driver.Request = Request\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbXNzcWwvbGliL3RlZGlvdXMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVosYUFBYSxtQkFBTyxDQUFDLDZEQUFTO0FBQzlCLHVCQUF1QixtQkFBTyxDQUFDLG9GQUFtQjtBQUNsRCxvQkFBb0IsbUJBQU8sQ0FBQyw0RUFBZTtBQUMzQyxnQkFBZ0IsbUJBQU8sQ0FBQyxvRUFBVzs7QUFFbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQsa0RBQWlEO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxDQUFDLEVBQUM7O0FBRUYsdURBQXNEO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxFQUFDOztBQUVGO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXFZhbGVudGluYVxcT25lRHJpdmVcXERlc2t0b3BcXEthdGEgR2l0XFxLYXRhLUZsdWpvR2VuZXJpY29kZUFwcm9iYWNpb25cXG5vZGVfbW9kdWxlc1xcbXNzcWxcXGxpYlxcdGVkaW91c1xcaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IGJhc2UgPSByZXF1aXJlKCcuLi9iYXNlJylcbmNvbnN0IENvbm5lY3Rpb25Qb29sID0gcmVxdWlyZSgnLi9jb25uZWN0aW9uLXBvb2wnKVxuY29uc3QgVHJhbnNhY3Rpb24gPSByZXF1aXJlKCcuL3RyYW5zYWN0aW9uJylcbmNvbnN0IFJlcXVlc3QgPSByZXF1aXJlKCcuL3JlcXVlc3QnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5hc3NpZ24oe1xuICBDb25uZWN0aW9uUG9vbCxcbiAgVHJhbnNhY3Rpb24sXG4gIFJlcXVlc3QsXG4gIFByZXBhcmVkU3RhdGVtZW50OiBiYXNlLlByZXBhcmVkU3RhdGVtZW50XG59LCBiYXNlLmV4cG9ydHMpXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUuZXhwb3J0cywgJ1Byb21pc2UnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogKCkgPT4ge1xuICAgIHJldHVybiBiYXNlLlByb21pc2VcbiAgfSxcbiAgc2V0OiAodmFsdWUpID0+IHtcbiAgICBiYXNlLlByb21pc2UgPSB2YWx1ZVxuICB9XG59KVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLmV4cG9ydHMsICd2YWx1ZUhhbmRsZXInLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIHZhbHVlOiBiYXNlLnZhbHVlSGFuZGxlcixcbiAgd3JpdGFibGU6IGZhbHNlLFxuICBjb25maWd1cmFibGU6IGZhbHNlXG59KVxuXG5iYXNlLmRyaXZlci5uYW1lID0gJ3RlZGlvdXMnXG5iYXNlLmRyaXZlci5Db25uZWN0aW9uUG9vbCA9IENvbm5lY3Rpb25Qb29sXG5iYXNlLmRyaXZlci5UcmFuc2FjdGlvbiA9IFRyYW5zYWN0aW9uXG5iYXNlLmRyaXZlci5SZXF1ZXN0ID0gUmVxdWVzdFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mssql/lib/tedious/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mssql/lib/tedious/request.js":
/*!***************************************************!*\
  !*** ./node_modules/mssql/lib/tedious/request.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst tds = __webpack_require__(/*! tedious */ \"(rsc)/./node_modules/tedious/lib/tedious.js\")\nconst debug = __webpack_require__(/*! debug */ \"(rsc)/./node_modules/debug/src/index.js\")('mssql:tedi')\nconst BaseRequest = __webpack_require__(/*! ../base/request */ \"(rsc)/./node_modules/mssql/lib/base/request.js\")\nconst RequestError = __webpack_require__(/*! ../error/request-error */ \"(rsc)/./node_modules/mssql/lib/error/request-error.js\")\nconst { IDS, objectHasProperty } = __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/mssql/lib/utils.js\")\nconst { TYPES, DECLARATIONS, declare, cast } = __webpack_require__(/*! ../datatypes */ \"(rsc)/./node_modules/mssql/lib/datatypes.js\")\nconst Table = __webpack_require__(/*! ../table */ \"(rsc)/./node_modules/mssql/lib/table.js\")\nconst { PARSERS: UDT } = __webpack_require__(/*! ../udt */ \"(rsc)/./node_modules/mssql/lib/udt.js\")\nconst { valueHandler } = __webpack_require__(/*! ../shared */ \"(rsc)/./node_modules/mssql/lib/shared.js\")\n\nconst JSON_COLUMN_ID = 'JSON_F52E2B61-18A1-11d1-B105-00805F49916B'\nconst XML_COLUMN_ID = 'XML_F52E2B61-18A1-11d1-B105-00805F49916B'\n\nconst N_TYPES = {\n  BitN: 0x68,\n  DateTimeN: 0x6F,\n  DecimalN: 0x6A,\n  FloatN: 0x6D,\n  IntN: 0x26,\n  MoneyN: 0x6E,\n  NumericN: 0x6C\n}\n\nconst getTediousType = function (type) {\n  switch (type) {\n    case TYPES.VarChar: return tds.TYPES.VarChar\n    case TYPES.NVarChar: return tds.TYPES.NVarChar\n    case TYPES.Text: return tds.TYPES.Text\n    case TYPES.Int: return tds.TYPES.Int\n    case TYPES.BigInt: return tds.TYPES.BigInt\n    case TYPES.TinyInt: return tds.TYPES.TinyInt\n    case TYPES.SmallInt: return tds.TYPES.SmallInt\n    case TYPES.Bit: return tds.TYPES.Bit\n    case TYPES.Float: return tds.TYPES.Float\n    case TYPES.Decimal: return tds.TYPES.Decimal\n    case TYPES.Numeric: return tds.TYPES.Numeric\n    case TYPES.Real: return tds.TYPES.Real\n    case TYPES.Money: return tds.TYPES.Money\n    case TYPES.SmallMoney: return tds.TYPES.SmallMoney\n    case TYPES.Time: return tds.TYPES.Time\n    case TYPES.Date: return tds.TYPES.Date\n    case TYPES.DateTime: return tds.TYPES.DateTime\n    case TYPES.DateTime2: return tds.TYPES.DateTime2\n    case TYPES.DateTimeOffset: return tds.TYPES.DateTimeOffset\n    case TYPES.SmallDateTime: return tds.TYPES.SmallDateTime\n    case TYPES.UniqueIdentifier: return tds.TYPES.UniqueIdentifier\n    case TYPES.Xml: return tds.TYPES.NVarChar\n    case TYPES.Char: return tds.TYPES.Char\n    case TYPES.NChar: return tds.TYPES.NChar\n    case TYPES.NText: return tds.TYPES.NVarChar\n    case TYPES.Image: return tds.TYPES.Image\n    case TYPES.Binary: return tds.TYPES.Binary\n    case TYPES.VarBinary: return tds.TYPES.VarBinary\n    case TYPES.UDT: case TYPES.Geography: case TYPES.Geometry: return tds.TYPES.UDT\n    case TYPES.TVP: return tds.TYPES.TVP\n    case TYPES.Variant: return tds.TYPES.Variant\n    default: return type\n  }\n}\n\nconst getMssqlType = function (type, length) {\n  if (typeof type !== 'object') return undefined\n\n  switch (type) {\n    case tds.TYPES.Char: return TYPES.Char\n    case tds.TYPES.NChar: return TYPES.NChar\n    case tds.TYPES.VarChar: return TYPES.VarChar\n    case tds.TYPES.NVarChar: return TYPES.NVarChar\n    case tds.TYPES.Text: return TYPES.Text\n    case tds.TYPES.NText: return TYPES.NText\n    case tds.TYPES.Int: return TYPES.Int\n    case tds.TYPES.BigInt: return TYPES.BigInt\n    case tds.TYPES.TinyInt: return TYPES.TinyInt\n    case tds.TYPES.SmallInt: return TYPES.SmallInt\n    case tds.TYPES.Bit: return TYPES.Bit\n    case tds.TYPES.Float: return TYPES.Float\n    case tds.TYPES.Real: return TYPES.Real\n    case tds.TYPES.Money: return TYPES.Money\n    case tds.TYPES.SmallMoney: return TYPES.SmallMoney\n    case tds.TYPES.Numeric: return TYPES.Numeric\n    case tds.TYPES.Decimal: return TYPES.Decimal\n    case tds.TYPES.DateTime: return TYPES.DateTime\n    case tds.TYPES.Time: return TYPES.Time\n    case tds.TYPES.Date: return TYPES.Date\n    case tds.TYPES.DateTime2: return TYPES.DateTime2\n    case tds.TYPES.DateTimeOffset: return TYPES.DateTimeOffset\n    case tds.TYPES.SmallDateTime: return TYPES.SmallDateTime\n    case tds.TYPES.UniqueIdentifier: return TYPES.UniqueIdentifier\n    case tds.TYPES.Image: return TYPES.Image\n    case tds.TYPES.Binary: return TYPES.Binary\n    case tds.TYPES.VarBinary: return TYPES.VarBinary\n    case tds.TYPES.Xml: return TYPES.Xml\n    case tds.TYPES.UDT: return TYPES.UDT\n    case tds.TYPES.TVP: return TYPES.TVP\n    case tds.TYPES.Variant: return TYPES.Variant\n    default:\n      switch (type.id) {\n        case N_TYPES.BitN: return TYPES.Bit\n        case N_TYPES.NumericN: return TYPES.Numeric\n        case N_TYPES.DecimalN: return TYPES.Decimal\n        case N_TYPES.IntN:\n          if (length === 8) return TYPES.BigInt\n          if (length === 4) return TYPES.Int\n          if (length === 2) return TYPES.SmallInt\n          return TYPES.TinyInt\n        case N_TYPES.FloatN:\n          if (length === 8) return TYPES.Float\n          return TYPES.Real\n        case N_TYPES.MoneyN:\n          if (length === 8) return TYPES.Money\n          return TYPES.SmallMoney\n        case N_TYPES.DateTimeN:\n          if (length === 8) return TYPES.DateTime\n          return TYPES.SmallDateTime\n      }\n  }\n}\n\nconst createColumns = function (metadata, arrayRowMode) {\n  let out = {}\n  if (arrayRowMode) out = []\n  for (let index = 0, length = metadata.length; index < length; index++) {\n    const column = metadata[index]\n    const outColumn = {\n      index,\n      name: column.colName,\n      length: column.dataLength,\n      type: getMssqlType(column.type, column.dataLength),\n      scale: column.scale,\n      precision: column.precision,\n      nullable: !!(column.flags & 0x01),\n      caseSensitive: !!(column.flags & 0x02),\n      identity: !!(column.flags & 0x10),\n      readOnly: !(column.flags & 0x0C)\n    }\n\n    if (column.udtInfo) {\n      outColumn.udt = {\n        name: column.udtInfo.typeName,\n        database: column.udtInfo.dbname,\n        schema: column.udtInfo.owningSchema,\n        assembly: column.udtInfo.assemblyName\n      }\n\n      if (DECLARATIONS[column.udtInfo.typeName]) {\n        outColumn.type = DECLARATIONS[column.udtInfo.typeName]\n      }\n    }\n\n    if (arrayRowMode) {\n      out.push(outColumn)\n    } else {\n      out[column.colName] = outColumn\n    }\n  }\n\n  return out\n}\n\nconst valueCorrection = function (value, metadata) {\n  const type = getMssqlType(metadata.type)\n  if (valueHandler.has(type)) {\n    return valueHandler.get(type)(value)\n  } else if ((metadata.type === tds.TYPES.UDT) && (value != null)) {\n    if (UDT[metadata.udtInfo.typeName]) {\n      return UDT[metadata.udtInfo.typeName](value)\n    } else {\n      return value\n    }\n  } else {\n    return value\n  }\n}\n\nconst parameterCorrection = function (value) {\n  if (value instanceof Table) {\n    const tvp = {\n      name: value.name,\n      schema: value.schema,\n      columns: [],\n      rows: value.rows\n    }\n\n    for (const col of value.columns) {\n      tvp.columns.push({\n        name: col.name,\n        type: getTediousType(col.type),\n        length: col.length,\n        scale: col.scale,\n        precision: col.precision\n      })\n    }\n\n    return tvp\n  } else {\n    return value\n  }\n}\n\nclass Request extends BaseRequest {\n  /*\n  Execute specified sql batch.\n  */\n\n  _batch (batch, callback) {\n    this._isBatch = true\n    this._query(batch, callback)\n  }\n\n  /*\n  Bulk load.\n  */\n\n  _bulk (table, options, callback) {\n    super._bulk(table, options, err => {\n      if (err) return callback(err)\n\n      try {\n        table._makeBulk()\n      } catch (e) {\n        return callback(new RequestError(e, 'EREQUEST'))\n      }\n\n      if (!table.name) {\n        return callback(new RequestError('Table name must be specified for bulk insert.', 'ENAME'))\n      }\n\n      if (table.name.charAt(0) === '@') {\n        return callback(new RequestError(\"You can't use table variables for bulk insert.\", 'ENAME'))\n      }\n\n      const errors = []\n      const errorHandlers = {}\n      let hasReturned = false\n\n      const handleError = (doReturn, connection, info) => {\n        let err = new Error(info.message)\n        err.info = info\n        err = new RequestError(err, 'EREQUEST')\n\n        if (this.stream) {\n          this.emit('error', err)\n        } else {\n          if (doReturn && !hasReturned) {\n            if (connection) {\n              for (const event in errorHandlers) {\n                connection.removeListener(event, errorHandlers[event])\n              }\n\n              this.parent.release(connection)\n            }\n\n            hasReturned = true\n            callback(err)\n          }\n        }\n\n        // we must collect errors even in stream mode\n        errors.push(err)\n      }\n\n      const handleInfo = msg => {\n        this.emit('info', {\n          message: msg.message,\n          number: msg.number,\n          state: msg.state,\n          class: msg.class,\n          lineNumber: msg.lineNumber,\n          serverName: msg.serverName,\n          procName: msg.procName\n        })\n      }\n\n      this.parent.acquire(this, (err, connection) => {\n        const callbackWithRelease = (err, ...args) => {\n          try {\n            this.parent.release(connection)\n          } catch (e) {\n            // noop\n          }\n          callback(err, ...args)\n        }\n        if (err) return callbackWithRelease(err)\n\n        debug('connection(%d): borrowed to request #%d', IDS.get(connection), IDS.get(this))\n\n        if (this.canceled) {\n          debug('request(%d): canceled', IDS.get(this))\n          return callbackWithRelease(new RequestError('Canceled.', 'ECANCEL'))\n        }\n\n        this._cancel = () => {\n          debug('request(%d): cancel', IDS.get(this))\n          connection.cancel()\n        }\n\n        // attach handler to handle multiple error messages\n        connection.on('infoMessage', errorHandlers.infoMessage = handleInfo)\n        connection.on('errorMessage', errorHandlers.errorMessage = handleError.bind(null, false, connection))\n        connection.on('error', errorHandlers.error = handleError.bind(null, true, connection))\n\n        const done = (err, rowCount) => {\n          // to make sure we handle no-sql errors as well\n          if (err && (!errors.length || (errors.length && err.message !== errors[errors.length - 1].message))) {\n            err = new RequestError(err, 'EREQUEST')\n            if (this.stream) this.emit('error', err)\n            errors.push(err)\n          }\n\n          delete this._cancel\n\n          let error\n          if (errors.length && !this.stream) {\n            error = errors.pop()\n            error.precedingErrors = errors\n          }\n\n          if (!hasReturned) {\n            for (const event in errorHandlers) {\n              connection.removeListener(event, errorHandlers[event])\n            }\n\n            hasReturned = true\n\n            if (this.stream) {\n              callbackWithRelease(null, rowCount)\n            } else {\n              callbackWithRelease(error, rowCount)\n            }\n          }\n        }\n\n        const bulk = connection.newBulkLoad(table.path, options, done)\n\n        for (const col of table.columns) {\n          bulk.addColumn(col.name, getTediousType(col.type), { nullable: col.nullable, length: col.length, scale: col.scale, precision: col.precision })\n        }\n\n        if (table.create) {\n          const objectid = table.temporary ? `tempdb..[${table.name}]` : table.path\n          const req = new tds.Request(`if object_id('${objectid.replace(/'/g, '\\'\\'')}') is null ${table.declare()}`, err => {\n            if (err) return done(err)\n\n            connection.execBulkLoad(bulk, table.rows)\n          })\n          this._setCurrentRequest(req)\n\n          connection.execSqlBatch(req)\n        } else {\n          connection.execBulkLoad(bulk, table.rows)\n        }\n      })\n    })\n  }\n\n  /*\n  Execute specified sql command.\n  */\n\n  _query (command, callback) {\n    super._query(command, err => {\n      if (err) return callback(err)\n\n      const recordsets = []\n      const recordsetcolumns = []\n      const errors = []\n      const errorHandlers = {}\n      const output = {}\n      const rowsAffected = []\n\n      let columns = {}\n      let recordset = []\n      let batchLastRow = null\n      let batchHasOutput = false\n      let isChunkedRecordset = false\n      let chunksBuffer = null\n      let hasReturned = false\n\n      const handleError = (doReturn, connection, info) => {\n        let err = new Error(info.message)\n        err.info = info\n        err = new RequestError(err, 'EREQUEST')\n\n        if (this.stream) {\n          this.emit('error', err)\n        } else {\n          if (doReturn && !hasReturned) {\n            if (connection) {\n              for (const event in errorHandlers) {\n                connection.removeListener(event, errorHandlers[event])\n              }\n\n              this.parent.release(connection)\n            }\n\n            hasReturned = true\n            callback(err)\n          }\n        }\n\n        // we must collect errors even in stream mode\n        errors.push(err)\n      }\n\n      const handleInfo = msg => {\n        this.emit('info', {\n          message: msg.message,\n          number: msg.number,\n          state: msg.state,\n          class: msg.class,\n          lineNumber: msg.lineNumber,\n          serverName: msg.serverName,\n          procName: msg.procName\n        })\n      }\n\n      this.parent.acquire(this, (err, connection, config) => {\n        if (err) return callback(err)\n\n        debug('connection(%d): borrowed to request #%d', IDS.get(connection), IDS.get(this))\n\n        let row\n\n        if (this.canceled) {\n          debug('request(%d): canceled', IDS.get(this))\n          this.parent.release(connection)\n          return callback(new RequestError('Canceled.', 'ECANCEL'))\n        }\n\n        this._cancel = () => {\n          debug('request(%d): cancel', IDS.get(this))\n          connection.cancel()\n        }\n\n        // attach handler to handle multiple error messages\n        connection.on('infoMessage', errorHandlers.infoMessage = handleInfo)\n        connection.on('errorMessage', errorHandlers.errorMessage = handleError.bind(null, false, connection))\n        connection.on('error', errorHandlers.error = handleError.bind(null, true, connection))\n\n        debug('request(%d): query', IDS.get(this), command)\n\n        const req = new tds.Request(command, err => {\n          // tedious v15 has started using AggregateErrors to wrap multiple errors into single error objects\n          (err?.errors ? err.errors : [err]).forEach((e, i, { length }) => {\n            // to make sure we handle no-sql errors as well\n            if (e && (!errors.length || (errors.length && errors.length >= length && e.message !== errors[errors.length - length + i].message))) {\n              e = new RequestError(e, 'EREQUEST')\n              if (this.stream) this.emit('error', e)\n              errors.push(e)\n            }\n          })\n\n          // process batch outputs\n          if (batchHasOutput) {\n            if (!this.stream) batchLastRow = recordsets.pop()[0]\n\n            for (const name in batchLastRow) {\n              const value = batchLastRow[name]\n              if (name !== '___return___') {\n                output[name] = value\n              }\n            }\n          }\n\n          delete this._cancel\n\n          let error\n          if (errors.length && !this.stream) {\n            error = errors.pop()\n            error.precedingErrors = errors\n          }\n\n          if (!hasReturned) {\n            for (const event in errorHandlers) {\n              connection.removeListener(event, errorHandlers[event])\n            }\n\n            this.parent.release(connection)\n            hasReturned = true\n\n            if (error) {\n              debug('request(%d): failed', IDS.get(this), error)\n            } else {\n              debug('request(%d): completed', IDS.get(this))\n            }\n\n            if (this.stream) {\n              callback(null, null, output, rowsAffected, recordsetcolumns)\n            } else {\n              callback(error, recordsets, output, rowsAffected, recordsetcolumns)\n            }\n          }\n        })\n\n        this._setCurrentRequest(req)\n\n        req.on('columnMetadata', metadata => {\n          columns = createColumns(metadata, this.arrayRowMode)\n\n          isChunkedRecordset = false\n          if (metadata.length === 1 && (metadata[0].colName === JSON_COLUMN_ID || metadata[0].colName === XML_COLUMN_ID)) {\n            isChunkedRecordset = true\n            chunksBuffer = []\n          }\n\n          if (this.stream) {\n            if (this._isBatch) {\n              // don't stream recordset with output values in batches\n              if (!columns.___return___) {\n                this.emit('recordset', columns)\n              }\n            } else {\n              this.emit('recordset', columns)\n            }\n          }\n          if (this.arrayRowMode) recordsetcolumns.push(columns)\n        })\n\n        const doneHandler = (rowCount, more) => {\n          if (rowCount != null) {\n            rowsAffected.push(rowCount)\n            if (this.stream) {\n              this.emit('rowsaffected', rowCount)\n            }\n          }\n          // this function is called even when select only set variables so we should skip adding a new recordset\n          if (Object.keys(columns).length === 0) return\n\n          if (isChunkedRecordset) {\n            const concatenatedChunks = chunksBuffer.join('')\n            if (columns[JSON_COLUMN_ID] && config.parseJSON === true) {\n              try {\n                if (concatenatedChunks === '') {\n                  row = null\n                } else {\n                  row = JSON.parse(concatenatedChunks)\n                }\n              } catch (ex) {\n                row = null\n                const ex2 = new RequestError(new Error(`Failed to parse incoming JSON. ${ex.message}`), 'EJSON')\n\n                if (this.stream) this.emit('error', ex2)\n\n                // we must collect errors even in stream mode\n                errors.push(ex2)\n              }\n            } else {\n              row = {}\n              row[Object.keys(columns)[0]] = concatenatedChunks\n            }\n\n            chunksBuffer = null\n\n            if (this.stream) {\n              this.emit('row', row)\n            } else {\n              recordset.push(row)\n            }\n          }\n\n          if (!this.stream) {\n            // all rows of current recordset loaded\n            Object.defineProperty(recordset, 'columns', {\n              enumerable: false,\n              configurable: true,\n              value: columns\n            })\n\n            Object.defineProperty(recordset, 'toTable', {\n              enumerable: false,\n              configurable: true,\n              value (name) { return Table.fromRecordset(this, name) }\n            })\n\n            recordsets.push(recordset)\n          }\n\n          recordset = []\n          columns = {}\n        }\n\n        req.on('doneInProc', doneHandler) // doneInProc handlers are used in both queries and batches\n        req.on('done', doneHandler) // done handlers are used in batches\n\n        req.on('returnValue', (parameterName, value, metadata) => {\n          output[parameterName] = value\n        })\n\n        req.on('row', columns => {\n          if (!recordset) recordset = []\n\n          if (isChunkedRecordset) {\n            return chunksBuffer.push(columns[0].value)\n          }\n\n          if (this.arrayRowMode) {\n            row = []\n          } else {\n            row = {}\n          }\n          for (const col of columns) {\n            col.value = valueCorrection(col.value, col.metadata)\n\n            if (this.arrayRowMode) {\n              row.push(col.value)\n            } else {\n              const exi = row[col.metadata.colName]\n              if (exi !== undefined) {\n                if (exi instanceof Array) {\n                  exi.push(col.value)\n                } else {\n                  row[col.metadata.colName] = [exi, col.value]\n                }\n              } else {\n                row[col.metadata.colName] = col.value\n              }\n            }\n          }\n\n          if (this.stream) {\n            if (this._isBatch) {\n              // dont stream recordset with output values in batches\n              if (row.___return___) {\n                batchLastRow = row\n              } else {\n                this.emit('row', row)\n              }\n            } else {\n              this.emit('row', row)\n            }\n          } else {\n            recordset.push(row)\n          }\n        })\n\n        if (this._isBatch) {\n          if (Object.keys(this.parameters).length) {\n            for (const name in this.parameters) {\n              if (!objectHasProperty(this.parameters, name)) {\n                continue\n              }\n              const param = this.parameters[name]\n\n              try {\n                param.value = getTediousType(param.type).validate(param.value, this.parent.collation)\n              } catch (e) {\n                e.message = `Validation failed for parameter '${name}'. ${e.message}`\n                const err = new RequestError(e, 'EPARAM')\n\n                this.parent.release(connection)\n                return callback(err)\n              }\n            }\n\n            const declarations = []\n            for (const name in this.parameters) {\n              if (!objectHasProperty(this.parameters, name)) {\n                continue\n              }\n              const param = this.parameters[name]\n              declarations.push(`@${name} ${declare(param.type, param)}`)\n            }\n\n            const assigns = []\n            for (const name in this.parameters) {\n              if (!objectHasProperty(this.parameters, name)) {\n                continue\n              }\n              const param = this.parameters[name]\n              assigns.push(`@${name} = ${cast(param.value, param.type, param)}`)\n            }\n\n            const selects = []\n            for (const name in this.parameters) {\n              if (!objectHasProperty(this.parameters, name)) {\n                continue\n              }\n              const param = this.parameters[name]\n              if (param.io === 2) {\n                selects.push(`@${name} as [${name}]`)\n              }\n            }\n\n            batchHasOutput = selects.length > 0\n\n            req.sqlTextOrProcedure = `declare ${declarations.join(', ')};select ${assigns.join(', ')};${req.sqlTextOrProcedure};${batchHasOutput ? (`select 1 as [___return___], ${selects.join(', ')}`) : ''}`\n          }\n        } else {\n          for (const name in this.parameters) {\n            if (!objectHasProperty(this.parameters, name)) {\n              continue\n            }\n            const param = this.parameters[name]\n            if (param.io === 1) {\n              req.addParameter(param.name, getTediousType(param.type), parameterCorrection(param.value), { length: param.length, scale: param.scale, precision: param.precision })\n            } else {\n              req.addOutputParameter(param.name, getTediousType(param.type), parameterCorrection(param.value), { length: param.length, scale: param.scale, precision: param.precision })\n            }\n          }\n        }\n\n        try {\n          connection[this._isBatch ? 'execSqlBatch' : 'execSql'](req)\n        } catch (error) {\n          handleError(true, connection, error)\n        }\n      })\n    })\n  }\n\n  /*\n  Execute stored procedure with specified parameters.\n  */\n\n  _execute (procedure, callback) {\n    super._execute(procedure, err => {\n      if (err) return callback(err)\n\n      const recordsets = []\n      const recordsetcolumns = []\n      const errors = []\n      const errorHandlers = {}\n      const output = {}\n      const rowsAffected = []\n\n      let columns = {}\n      let recordset = []\n      let returnValue = 0\n      let isChunkedRecordset = false\n      let chunksBuffer = null\n      let hasReturned = false\n\n      const handleError = (doReturn, connection, info) => {\n        let err = new Error(info.message)\n        err.info = info\n        err = new RequestError(err, 'EREQUEST')\n\n        if (this.stream) {\n          this.emit('error', err)\n        } else {\n          if (doReturn && !hasReturned) {\n            if (connection) {\n              for (const event in errorHandlers) {\n                connection.removeListener(event, errorHandlers[event])\n              }\n\n              this.parent.release(connection)\n            }\n\n            hasReturned = true\n            callback(err)\n          }\n        }\n\n        // we must collect errors even in stream mode\n        errors.push(err)\n      }\n\n      const handleInfo = msg => {\n        this.emit('info', {\n          message: msg.message,\n          number: msg.number,\n          state: msg.state,\n          class: msg.class,\n          lineNumber: msg.lineNumber,\n          serverName: msg.serverName,\n          procName: msg.procName\n        })\n      }\n\n      this.parent.acquire(this, (err, connection, config) => {\n        if (err) return callback(err)\n\n        debug('connection(%d): borrowed to request #%d', IDS.get(connection), IDS.get(this))\n\n        let row\n\n        if (this.canceled) {\n          debug('request(%d): canceled', IDS.get(this))\n          this.parent.release(connection)\n          return callback(new RequestError('Canceled.', 'ECANCEL'))\n        }\n\n        this._cancel = () => {\n          debug('request(%d): cancel', IDS.get(this))\n          connection.cancel()\n        }\n\n        // attach handler to handle multiple error messages\n        connection.on('infoMessage', errorHandlers.infoMessage = handleInfo)\n        connection.on('errorMessage', errorHandlers.errorMessage = handleError.bind(null, false, connection))\n        connection.on('error', errorHandlers.error = handleError.bind(null, true, connection))\n\n        if (debug.enabled) {\n          // log stored procedure executions and provided parameters\n          const params = Object.keys(this.parameters).map(k => this.parameters[k])\n          // cut long string parameters short to keep log somewhat clean\n          const logValue = s => typeof s === 'string' && s.length > 50 ? s.substring(0, 47) + '...' : s\n          // format parameter names as 'my_parameter [sql.Int]'\n          const logName = param => param.name + ' [sql.' + param.type.name + ']'\n          const logParams = {}\n          params.forEach(p => { logParams[logName(p)] = logValue(p.value) })\n          debug('request(%d): execute %s %O', IDS.get(this), procedure, logParams)\n        }\n\n        const req = new tds.Request(procedure, err => {\n          // to make sure we handle no-sql errors as well\n          if (err && (!errors.length || (errors.length && err.message !== errors[errors.length - 1].message))) {\n            err = new RequestError(err, 'EREQUEST')\n            if (this.stream) this.emit('error', err)\n            errors.push(err)\n          }\n\n          delete this._cancel\n\n          let error\n          if (errors.length && !this.stream) {\n            error = errors.pop()\n            error.precedingErrors = errors\n          }\n\n          if (!hasReturned) {\n            for (const event in errorHandlers) {\n              connection.removeListener(event, errorHandlers[event])\n            }\n\n            this.parent.release(connection)\n            hasReturned = true\n\n            if (error) {\n              debug('request(%d): failed', IDS.get(this), error)\n            } else {\n              debug('request(%d): complete', IDS.get(this))\n            }\n\n            if (this.stream) {\n              callback(null, null, output, returnValue, rowsAffected, recordsetcolumns)\n            } else {\n              callback(error, recordsets, output, returnValue, rowsAffected, recordsetcolumns)\n            }\n          }\n        })\n\n        this._setCurrentRequest(req)\n\n        req.on('columnMetadata', metadata => {\n          columns = createColumns(metadata, this.arrayRowMode)\n\n          isChunkedRecordset = false\n          if ((metadata.length === 1) && (metadata[0].colName === JSON_COLUMN_ID || metadata[0].colName === XML_COLUMN_ID)) {\n            isChunkedRecordset = true\n            chunksBuffer = []\n          }\n\n          if (this.stream) this.emit('recordset', columns)\n          if (this.arrayRowMode) recordsetcolumns.push(columns)\n        })\n\n        req.on('row', columns => {\n          if (!recordset) recordset = []\n\n          if (isChunkedRecordset) {\n            return chunksBuffer.push(columns[0].value)\n          }\n\n          if (this.arrayRowMode) {\n            row = []\n          } else {\n            row = {}\n          }\n          for (const col of columns) {\n            col.value = valueCorrection(col.value, col.metadata)\n\n            if (this.arrayRowMode) {\n              row.push(col.value)\n            } else {\n              const exi = row[col.metadata.colName]\n              if (exi != null) {\n                if (exi instanceof Array) {\n                  exi.push(col.value)\n                } else {\n                  row[col.metadata.colName] = [exi, col.value]\n                }\n              } else {\n                row[col.metadata.colName] = col.value\n              }\n            }\n          }\n\n          if (this.stream) {\n            this.emit('row', row)\n          } else {\n            recordset.push(row)\n          }\n        })\n\n        req.on('doneInProc', (rowCount, more) => {\n          if (rowCount != null) {\n            rowsAffected.push(rowCount)\n            if (this.stream) {\n              this.emit('rowsaffected', rowCount)\n            }\n          }\n\n          // filter empty recordsets when NOCOUNT is OFF\n          if (Object.keys(columns).length === 0) return\n\n          if (isChunkedRecordset) {\n            if (columns[JSON_COLUMN_ID] && config.parseJSON === true) {\n              try {\n                if (chunksBuffer.length === 0) {\n                  row = null\n                } else {\n                  row = JSON.parse(chunksBuffer.join(''))\n                }\n              } catch (ex) {\n                row = null\n                const ex2 = new RequestError(new Error(`Failed to parse incoming JSON. ${ex.message}`), 'EJSON')\n\n                if (this.stream) this.emit('error', ex2)\n\n                // we must collect errors even in stream mode\n                errors.push(ex2)\n              }\n            } else {\n              row = {}\n              row[Object.keys(columns)[0]] = chunksBuffer.join('')\n            }\n\n            chunksBuffer = null\n\n            if (this.stream) {\n              this.emit('row', row)\n            } else {\n              recordset.push(row)\n            }\n          }\n\n          if (!this.stream) {\n            // all rows of current recordset loaded\n            Object.defineProperty(recordset, 'columns', {\n              enumerable: false,\n              configurable: true,\n              value: columns\n            })\n\n            Object.defineProperty(recordset, 'toTable', {\n              enumerable: false,\n              configurable: true,\n              value (name) { return Table.fromRecordset(this, name) }\n            })\n\n            recordsets.push(recordset)\n          }\n\n          recordset = []\n          columns = {}\n        })\n\n        req.on('doneProc', (rowCount, more, returnStatus) => {\n          returnValue = returnStatus\n        })\n\n        req.on('returnValue', (parameterName, value, metadata) => {\n          output[parameterName] = value\n        })\n\n        for (const name in this.parameters) {\n          if (!objectHasProperty(this.parameters, name)) {\n            continue\n          }\n          const param = this.parameters[name]\n          if (param.io === 1) {\n            req.addParameter(param.name, getTediousType(param.type), parameterCorrection(param.value), { length: param.length, scale: param.scale, precision: param.precision })\n          } else {\n            req.addOutputParameter(param.name, getTediousType(param.type), parameterCorrection(param.value), { length: param.length, scale: param.scale, precision: param.precision })\n          }\n        }\n\n        connection.callProcedure(req)\n      })\n    })\n  }\n\n  _pause () {\n    super._pause()\n    if (this._currentRequest) {\n      this._currentRequest.pause()\n    }\n  }\n\n  _resume () {\n    super._resume()\n    if (this._currentRequest) {\n      this._currentRequest.resume()\n    }\n  }\n}\n\nmodule.exports = Request\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mssql/lib/tedious/request.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mssql/lib/tedious/transaction.js":
/*!*******************************************************!*\
  !*** ./node_modules/mssql/lib/tedious/transaction.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst debug = __webpack_require__(/*! debug */ \"(rsc)/./node_modules/debug/src/index.js\")('mssql:tedi')\nconst BaseTransaction = __webpack_require__(/*! ../base/transaction */ \"(rsc)/./node_modules/mssql/lib/base/transaction.js\")\nconst { IDS } = __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/mssql/lib/utils.js\")\nconst TransactionError = __webpack_require__(/*! ../error/transaction-error */ \"(rsc)/./node_modules/mssql/lib/error/transaction-error.js\")\n\nclass Transaction extends BaseTransaction {\n  constructor (parent) {\n    super(parent)\n\n    this._abort = () => {\n      if (!this._rollbackRequested) {\n        // transaction interrupted because of XACT_ABORT\n\n        const pc = this._acquiredConnection\n\n        // defer releasing so connection can switch from SentClientRequest to LoggedIn state\n        setImmediate(this.parent.release.bind(this.parent), pc)\n\n        this._acquiredConnection.removeListener('rollbackTransaction', this._abort)\n        this._acquiredConnection = null\n        this._acquiredConfig = null\n        this._aborted = true\n\n        this.emit('rollback', true)\n      }\n    }\n  }\n\n  _begin (isolationLevel, callback) {\n    super._begin(isolationLevel, err => {\n      if (err) return callback(err)\n\n      debug('transaction(%d): begin', IDS.get(this))\n\n      this.parent.acquire(this, (err, connection, config) => {\n        if (err) return callback(err)\n\n        this._acquiredConnection = connection\n        this._acquiredConnection.on('rollbackTransaction', this._abort)\n        this._acquiredConfig = config\n\n        connection.beginTransaction(err => {\n          if (err) err = new TransactionError(err)\n\n          debug('transaction(%d): begun', IDS.get(this))\n\n          callback(err)\n        }, this.name, this.isolationLevel)\n      })\n    })\n  }\n\n  _commit (callback) {\n    super._commit(err => {\n      if (err) return callback(err)\n\n      debug('transaction(%d): commit', IDS.get(this))\n\n      this._acquiredConnection.commitTransaction(err => {\n        if (err) err = new TransactionError(err)\n\n        this._acquiredConnection.removeListener('rollbackTransaction', this._abort)\n        this.parent.release(this._acquiredConnection)\n        this._acquiredConnection = null\n        this._acquiredConfig = null\n\n        if (!err) debug('transaction(%d): commited', IDS.get(this))\n\n        callback(err)\n      })\n    })\n  }\n\n  _rollback (callback) {\n    super._rollback(err => {\n      if (err) return callback(err)\n\n      debug('transaction(%d): rollback', IDS.get(this))\n\n      this._acquiredConnection.rollbackTransaction(err => {\n        if (err) err = new TransactionError(err)\n\n        this._acquiredConnection.removeListener('rollbackTransaction', this._abort)\n        this.parent.release(this._acquiredConnection)\n        this._acquiredConnection = null\n        this._acquiredConfig = null\n\n        if (!err) debug('transaction(%d): rolled back', IDS.get(this))\n\n        callback(err)\n      })\n    })\n  }\n}\n\nmodule.exports = Transaction\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbXNzcWwvbGliL3RlZGlvdXMvdHJhbnNhY3Rpb24uanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVosY0FBYyxtQkFBTyxDQUFDLHNEQUFPO0FBQzdCLHdCQUF3QixtQkFBTyxDQUFDLCtFQUFxQjtBQUNyRCxRQUFRLE1BQU0sRUFBRSxtQkFBTyxDQUFDLHlEQUFVO0FBQ2xDLHlCQUF5QixtQkFBTyxDQUFDLDZGQUE0Qjs7QUFFN0Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUCxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBOztBQUVBIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXFZhbGVudGluYVxcT25lRHJpdmVcXERlc2t0b3BcXEthdGEgR2l0XFxLYXRhLUZsdWpvR2VuZXJpY29kZUFwcm9iYWNpb25cXG5vZGVfbW9kdWxlc1xcbXNzcWxcXGxpYlxcdGVkaW91c1xcdHJhbnNhY3Rpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnbXNzcWw6dGVkaScpXG5jb25zdCBCYXNlVHJhbnNhY3Rpb24gPSByZXF1aXJlKCcuLi9iYXNlL3RyYW5zYWN0aW9uJylcbmNvbnN0IHsgSURTIH0gPSByZXF1aXJlKCcuLi91dGlscycpXG5jb25zdCBUcmFuc2FjdGlvbkVycm9yID0gcmVxdWlyZSgnLi4vZXJyb3IvdHJhbnNhY3Rpb24tZXJyb3InKVxuXG5jbGFzcyBUcmFuc2FjdGlvbiBleHRlbmRzIEJhc2VUcmFuc2FjdGlvbiB7XG4gIGNvbnN0cnVjdG9yIChwYXJlbnQpIHtcbiAgICBzdXBlcihwYXJlbnQpXG5cbiAgICB0aGlzLl9hYm9ydCA9ICgpID0+IHtcbiAgICAgIGlmICghdGhpcy5fcm9sbGJhY2tSZXF1ZXN0ZWQpIHtcbiAgICAgICAgLy8gdHJhbnNhY3Rpb24gaW50ZXJydXB0ZWQgYmVjYXVzZSBvZiBYQUNUX0FCT1JUXG5cbiAgICAgICAgY29uc3QgcGMgPSB0aGlzLl9hY3F1aXJlZENvbm5lY3Rpb25cblxuICAgICAgICAvLyBkZWZlciByZWxlYXNpbmcgc28gY29ubmVjdGlvbiBjYW4gc3dpdGNoIGZyb20gU2VudENsaWVudFJlcXVlc3QgdG8gTG9nZ2VkSW4gc3RhdGVcbiAgICAgICAgc2V0SW1tZWRpYXRlKHRoaXMucGFyZW50LnJlbGVhc2UuYmluZCh0aGlzLnBhcmVudCksIHBjKVxuXG4gICAgICAgIHRoaXMuX2FjcXVpcmVkQ29ubmVjdGlvbi5yZW1vdmVMaXN0ZW5lcigncm9sbGJhY2tUcmFuc2FjdGlvbicsIHRoaXMuX2Fib3J0KVxuICAgICAgICB0aGlzLl9hY3F1aXJlZENvbm5lY3Rpb24gPSBudWxsXG4gICAgICAgIHRoaXMuX2FjcXVpcmVkQ29uZmlnID0gbnVsbFxuICAgICAgICB0aGlzLl9hYm9ydGVkID0gdHJ1ZVxuXG4gICAgICAgIHRoaXMuZW1pdCgncm9sbGJhY2snLCB0cnVlKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIF9iZWdpbiAoaXNvbGF0aW9uTGV2ZWwsIGNhbGxiYWNrKSB7XG4gICAgc3VwZXIuX2JlZ2luKGlzb2xhdGlvbkxldmVsLCBlcnIgPT4ge1xuICAgICAgaWYgKGVycikgcmV0dXJuIGNhbGxiYWNrKGVycilcblxuICAgICAgZGVidWcoJ3RyYW5zYWN0aW9uKCVkKTogYmVnaW4nLCBJRFMuZ2V0KHRoaXMpKVxuXG4gICAgICB0aGlzLnBhcmVudC5hY3F1aXJlKHRoaXMsIChlcnIsIGNvbm5lY3Rpb24sIGNvbmZpZykgPT4ge1xuICAgICAgICBpZiAoZXJyKSByZXR1cm4gY2FsbGJhY2soZXJyKVxuXG4gICAgICAgIHRoaXMuX2FjcXVpcmVkQ29ubmVjdGlvbiA9IGNvbm5lY3Rpb25cbiAgICAgICAgdGhpcy5fYWNxdWlyZWRDb25uZWN0aW9uLm9uKCdyb2xsYmFja1RyYW5zYWN0aW9uJywgdGhpcy5fYWJvcnQpXG4gICAgICAgIHRoaXMuX2FjcXVpcmVkQ29uZmlnID0gY29uZmlnXG5cbiAgICAgICAgY29ubmVjdGlvbi5iZWdpblRyYW5zYWN0aW9uKGVyciA9PiB7XG4gICAgICAgICAgaWYgKGVycikgZXJyID0gbmV3IFRyYW5zYWN0aW9uRXJyb3IoZXJyKVxuXG4gICAgICAgICAgZGVidWcoJ3RyYW5zYWN0aW9uKCVkKTogYmVndW4nLCBJRFMuZ2V0KHRoaXMpKVxuXG4gICAgICAgICAgY2FsbGJhY2soZXJyKVxuICAgICAgICB9LCB0aGlzLm5hbWUsIHRoaXMuaXNvbGF0aW9uTGV2ZWwpXG4gICAgICB9KVxuICAgIH0pXG4gIH1cblxuICBfY29tbWl0IChjYWxsYmFjaykge1xuICAgIHN1cGVyLl9jb21taXQoZXJyID0+IHtcbiAgICAgIGlmIChlcnIpIHJldHVybiBjYWxsYmFjayhlcnIpXG5cbiAgICAgIGRlYnVnKCd0cmFuc2FjdGlvbiglZCk6IGNvbW1pdCcsIElEUy5nZXQodGhpcykpXG5cbiAgICAgIHRoaXMuX2FjcXVpcmVkQ29ubmVjdGlvbi5jb21taXRUcmFuc2FjdGlvbihlcnIgPT4ge1xuICAgICAgICBpZiAoZXJyKSBlcnIgPSBuZXcgVHJhbnNhY3Rpb25FcnJvcihlcnIpXG5cbiAgICAgICAgdGhpcy5fYWNxdWlyZWRDb25uZWN0aW9uLnJlbW92ZUxpc3RlbmVyKCdyb2xsYmFja1RyYW5zYWN0aW9uJywgdGhpcy5fYWJvcnQpXG4gICAgICAgIHRoaXMucGFyZW50LnJlbGVhc2UodGhpcy5fYWNxdWlyZWRDb25uZWN0aW9uKVxuICAgICAgICB0aGlzLl9hY3F1aXJlZENvbm5lY3Rpb24gPSBudWxsXG4gICAgICAgIHRoaXMuX2FjcXVpcmVkQ29uZmlnID0gbnVsbFxuXG4gICAgICAgIGlmICghZXJyKSBkZWJ1ZygndHJhbnNhY3Rpb24oJWQpOiBjb21taXRlZCcsIElEUy5nZXQodGhpcykpXG5cbiAgICAgICAgY2FsbGJhY2soZXJyKVxuICAgICAgfSlcbiAgICB9KVxuICB9XG5cbiAgX3JvbGxiYWNrIChjYWxsYmFjaykge1xuICAgIHN1cGVyLl9yb2xsYmFjayhlcnIgPT4ge1xuICAgICAgaWYgKGVycikgcmV0dXJuIGNhbGxiYWNrKGVycilcblxuICAgICAgZGVidWcoJ3RyYW5zYWN0aW9uKCVkKTogcm9sbGJhY2snLCBJRFMuZ2V0KHRoaXMpKVxuXG4gICAgICB0aGlzLl9hY3F1aXJlZENvbm5lY3Rpb24ucm9sbGJhY2tUcmFuc2FjdGlvbihlcnIgPT4ge1xuICAgICAgICBpZiAoZXJyKSBlcnIgPSBuZXcgVHJhbnNhY3Rpb25FcnJvcihlcnIpXG5cbiAgICAgICAgdGhpcy5fYWNxdWlyZWRDb25uZWN0aW9uLnJlbW92ZUxpc3RlbmVyKCdyb2xsYmFja1RyYW5zYWN0aW9uJywgdGhpcy5fYWJvcnQpXG4gICAgICAgIHRoaXMucGFyZW50LnJlbGVhc2UodGhpcy5fYWNxdWlyZWRDb25uZWN0aW9uKVxuICAgICAgICB0aGlzLl9hY3F1aXJlZENvbm5lY3Rpb24gPSBudWxsXG4gICAgICAgIHRoaXMuX2FjcXVpcmVkQ29uZmlnID0gbnVsbFxuXG4gICAgICAgIGlmICghZXJyKSBkZWJ1ZygndHJhbnNhY3Rpb24oJWQpOiByb2xsZWQgYmFjaycsIElEUy5nZXQodGhpcykpXG5cbiAgICAgICAgY2FsbGJhY2soZXJyKVxuICAgICAgfSlcbiAgICB9KVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gVHJhbnNhY3Rpb25cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mssql/lib/tedious/transaction.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mssql/lib/udt.js":
/*!***************************************!*\
  !*** ./node_modules/mssql/lib/udt.js ***!
  \***************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/* const FIGURE = {\n  INTERIOR_RING: 0x00,\n  STROKE: 0x01,\n  EXTERIOR_RING: 0x02\n};\n\nconst FIGURE_V2 = {\n  POINT: 0x00,\n  LINE: 0x01,\n  ARC: 0x02,\n  COMPOSITE_CURVE: 0x03\n};\n\nconst SHAPE = {\n  POINT: 0x01,\n  LINESTRING: 0x02,\n  POLYGON: 0x03,\n  MULTIPOINT: 0x04,\n  MULTILINESTRING: 0x05,\n  MULTIPOLYGON: 0x06,\n  GEOMETRY_COLLECTION: 0x07\n};\n\nconst SHAPE_V2 = {\n  POINT: 0x01,\n  LINESTRING: 0x02,\n  POLYGON: 0x03,\n  MULTIPOINT: 0x04,\n  MULTILINESTRING: 0x05,\n  MULTIPOLYGON: 0x06,\n  GEOMETRY_COLLECTION: 0x07,\n  CIRCULAR_STRING: 0x08,\n  COMPOUND_CURVE: 0x09,\n  CURVE_POLYGON: 0x0A,\n  FULL_GLOBE: 0x0B\n};\n\nconst SEGMENT = {\n  LINE: 0x00,\n  ARC: 0x01,\n  FIRST_LINE: 0x02,\n  FIRST_ARC: 0x03\n}; */\n\nclass Point {\n  constructor () {\n    this.x = 0\n    this.y = 0\n    this.z = null\n    this.m = null\n  }\n}\n\nconst parsePoints = (buffer, count, isGeometryPoint) => {\n  // s2.1.5 + s2.1.6\n  // The key distinction for parsing is that a GEOGRAPHY POINT is ordered Lat (y) then Long (x),\n  // while a GEOMETRY POINT is ordered x then y.\n  // Further, there are additional range constraints on GEOGRAPHY POINT that are useful for testing that the coordinate order has not been flipped, such as that Lat must be in the range [-90, +90].\n\n  const points = []\n  if (count < 1) {\n    return points\n  }\n\n  if (isGeometryPoint) {\n    // GEOMETRY POINT (s2.1.6): x then y.\n    for (let i = 1; i <= count; i++) {\n      const point = new Point()\n      points.push(point)\n      point.x = buffer.readDoubleLE(buffer.position)\n      point.y = buffer.readDoubleLE(buffer.position + 8)\n      buffer.position += 16\n    }\n  } else {\n    // GEOGRAPHY POINT (s2.1.5): Lat (y) then Long (x).\n    for (let i = 1; i <= count; i++) {\n      const point = new Point()\n      points.push(point)\n      point.lat = buffer.readDoubleLE(buffer.position)\n      point.lng = buffer.readDoubleLE(buffer.position + 8)\n\n      // For backwards compatibility, preserve the coordinate inversion in x and y.\n      // A future breaking change likely eliminate x and y for geography points in favor of just the lat and lng fields, as they've proven marvelously confusing.\n      // See discussion at: https://github.com/tediousjs/node-mssql/pull/1282#discussion_r677769531\n      point.x = point.lat\n      point.y = point.lng\n\n      buffer.position += 16\n    }\n  }\n\n  return points\n}\n\nconst parseZ = (buffer, points) => {\n  // s2.1.1 + s.2.1.2\n\n  if (points < 1) {\n    return\n  }\n\n  points.forEach(point => {\n    point.z = buffer.readDoubleLE(buffer.position)\n    buffer.position += 8\n  })\n}\n\nconst parseM = (buffer, points) => {\n  // s2.1.1 + s.2.1.2\n\n  if (points < 1) {\n    return\n  }\n\n  points.forEach(point => {\n    point.m = buffer.readDoubleLE(buffer.position)\n    buffer.position += 8\n  })\n}\n\nconst parseFigures = (buffer, count, properties) => {\n  // s2.1.3\n\n  const figures = []\n  if (count < 1) {\n    return figures\n  }\n\n  if (properties.P) {\n    figures.push({\n      attribute: 0x01,\n      pointOffset: 0\n    })\n  } else if (properties.L) {\n    figures.push({\n      attribute: 0x01,\n      pointOffset: 0\n    })\n  } else {\n    for (let i = 1; i <= count; i++) {\n      figures.push({\n        attribute: buffer.readUInt8(buffer.position),\n        pointOffset: buffer.readInt32LE(buffer.position + 1)\n      })\n\n      buffer.position += 5\n    }\n  }\n\n  return figures\n}\n\nconst parseShapes = (buffer, count, properties) => {\n  // s2.1.4\n\n  const shapes = []\n  if (count < 1) {\n    return shapes\n  }\n\n  if (properties.P) {\n    shapes.push({\n      parentOffset: -1,\n      figureOffset: 0,\n      type: 0x01\n    })\n  } else if (properties.L) {\n    shapes.push({\n      parentOffset: -1,\n      figureOffset: 0,\n      type: 0x02\n    })\n  } else {\n    for (let i = 1; i <= count; i++) {\n      shapes.push({\n        parentOffset: buffer.readInt32LE(buffer.position),\n        figureOffset: buffer.readInt32LE(buffer.position + 4),\n        type: buffer.readUInt8(buffer.position + 8)\n      })\n\n      buffer.position += 9\n    }\n  }\n\n  return shapes\n}\n\nconst parseSegments = (buffer, count) => {\n  // s2.1.7\n\n  const segments = []\n  if (count < 1) {\n    return segments\n  }\n\n  for (let i = 1; i <= count; i++) {\n    segments.push({ type: buffer.readUInt8(buffer.position) })\n\n    buffer.position++\n  }\n\n  return segments\n}\n\nconst parseGeography = (buffer, isUsingGeometryPoints) => {\n  // s2.1.1 + s.2.1.2\n\n  const srid = buffer.readInt32LE(0)\n  if (srid === -1) {\n    return null\n  }\n\n  const value = {\n    srid,\n    version: buffer.readUInt8(4)\n  }\n\n  const flags = buffer.readUInt8(5)\n  buffer.position = 6\n\n  // console.log(\"srid\", srid)\n  // console.log(\"version\", version)\n\n  const properties = {\n    Z: (flags & (1 << 0)) > 0,\n    M: (flags & (1 << 1)) > 0,\n    V: (flags & (1 << 2)) > 0,\n    P: (flags & (1 << 3)) > 0,\n    L: (flags & (1 << 4)) > 0\n  }\n\n  if (value.version === 2) {\n    properties.H = (flags & (1 << 3)) > 0\n  }\n\n  // console.log(\"properties\", properties);\n\n  let numberOfPoints\n  if (properties.P) {\n    numberOfPoints = 1\n  } else if (properties.L) {\n    numberOfPoints = 2\n  } else {\n    numberOfPoints = buffer.readUInt32LE(buffer.position)\n    buffer.position += 4\n  }\n\n  // console.log(\"numberOfPoints\", numberOfPoints)\n\n  value.points = parsePoints(buffer, numberOfPoints, isUsingGeometryPoints)\n\n  if (properties.Z) {\n    parseZ(buffer, value.points)\n  }\n\n  if (properties.M) {\n    parseM(buffer, value.points)\n  }\n\n  // console.log(\"points\", points)\n\n  let numberOfFigures\n  if (properties.P) {\n    numberOfFigures = 1\n  } else if (properties.L) {\n    numberOfFigures = 1\n  } else {\n    numberOfFigures = buffer.readUInt32LE(buffer.position)\n    buffer.position += 4\n  }\n\n  // console.log(\"numberOfFigures\", numberOfFigures)\n\n  value.figures = parseFigures(buffer, numberOfFigures, properties)\n\n  // console.log(\"figures\", figures)\n\n  let numberOfShapes\n  if (properties.P) {\n    numberOfShapes = 1\n  } else if (properties.L) {\n    numberOfShapes = 1\n  } else {\n    numberOfShapes = buffer.readUInt32LE(buffer.position)\n    buffer.position += 4\n  }\n\n  // console.log(\"numberOfShapes\", numberOfShapes)\n\n  value.shapes = parseShapes(buffer, numberOfShapes, properties)\n\n  // console.log( \"shapes\", shapes)\n\n  if (value.version === 2 && buffer.position < buffer.length) {\n    const numberOfSegments = buffer.readUInt32LE(buffer.position)\n    buffer.position += 4\n\n    // console.log(\"numberOfSegments\", numberOfSegments)\n\n    value.segments = parseSegments(buffer, numberOfSegments)\n\n    // console.log(\"segments\", segments)\n  } else {\n    value.segments = []\n  }\n\n  return value\n}\n\nmodule.exports.PARSERS = {\n  geography (buffer) {\n    return parseGeography(buffer, /* isUsingGeometryPoints: */false)\n  },\n\n  geometry (buffer) {\n    return parseGeography(buffer, /* isUsingGeometryPoints: */true)\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mssql/lib/udt.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/mssql/lib/utils.js":
/*!*****************************************!*\
  !*** ./node_modules/mssql/lib/utils.js ***!
  \*****************************************/
/***/ ((module) => {

eval("const IDS = new WeakMap()\nconst INCREMENT = {\n  Connection: 1,\n  ConnectionPool: 1,\n  Request: 1,\n  Transaction: 1,\n  PreparedStatement: 1\n}\n\nmodule.exports = {\n  objectHasProperty: (object, property) => Object.prototype.hasOwnProperty.call(object, property),\n  INCREMENT,\n  IDS: {\n    get: IDS.get.bind(IDS),\n    add: (object, type, id) => {\n      if (id) return IDS.set(object, id)\n      IDS.set(object, INCREMENT[type]++)\n    }\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbXNzcWwvbGliL3V0aWxzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxWYWxlbnRpbmFcXE9uZURyaXZlXFxEZXNrdG9wXFxLYXRhIEdpdFxcS2F0YS1GbHVqb0dlbmVyaWNvZGVBcHJvYmFjaW9uXFxub2RlX21vZHVsZXNcXG1zc3FsXFxsaWJcXHV0aWxzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IElEUyA9IG5ldyBXZWFrTWFwKClcbmNvbnN0IElOQ1JFTUVOVCA9IHtcbiAgQ29ubmVjdGlvbjogMSxcbiAgQ29ubmVjdGlvblBvb2w6IDEsXG4gIFJlcXVlc3Q6IDEsXG4gIFRyYW5zYWN0aW9uOiAxLFxuICBQcmVwYXJlZFN0YXRlbWVudDogMVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgb2JqZWN0SGFzUHJvcGVydHk6IChvYmplY3QsIHByb3BlcnR5KSA9PiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSksXG4gIElOQ1JFTUVOVCxcbiAgSURTOiB7XG4gICAgZ2V0OiBJRFMuZ2V0LmJpbmQoSURTKSxcbiAgICBhZGQ6IChvYmplY3QsIHR5cGUsIGlkKSA9PiB7XG4gICAgICBpZiAoaWQpIHJldHVybiBJRFMuc2V0KG9iamVjdCwgaWQpXG4gICAgICBJRFMuc2V0KG9iamVjdCwgSU5DUkVNRU5UW3R5cGVdKyspXG4gICAgfVxuICB9XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/mssql/lib/utils.js\n");

/***/ })

};
;